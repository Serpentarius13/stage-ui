declare module '@stage-ui/core/content/Divider/types' {
	 namespace DividerTypes {
	    interface Props extends Stage.AllProps<HTMLDivElement, Classes> {
	        /**
	         * Draw divider vertical
	         */
	        vertical?: boolean;
	        /**
	         * Sizes of dash
	         * @display Sizes
	         * @link /props/#size
	         */
	        dash?: Stage.Sizes | (string & {
	            T?: string;
	        });
	        /**
	         * Sizes of the gap between dashes
	         * @display Sizes
	         * @link /props/#size
	         */
	        gap?: Stage.Sizes | (string & {
	            T?: string;
	        });
	        /**
	         * Color of divider
	         * @default lightest
	         */
	        color?: Stage.ColorProp;
	    }
	    type Classes = {
	        /**
	         * Root element
	         */
	        container: void;
	    };
	}
	export default DividerTypes;

}
declare module '@stage-ui/core/content/Divider/styles' {
	import Types from '@stage-ui/core/content/Divider/types'; const createClasses: Stage.CreateClasses<Types.Classes, Types.Props>;
	export default createClasses;

}
declare module '@stage-ui/core/content/Divider' {
	import Types from '@stage-ui/core/content/Divider/types'; const _default: import("react").ForwardRefExoticComponent<Types.Props & import("react").RefAttributes<HTMLDivElement>>;
	export default _default;

}
declare module '@stage-ui/core/content/Spinner/types' {
	 namespace SpinnerTypes {
	    interface Props extends Stage.AllProps<HTMLDivElement, Classes> {
	        /**
	         * Color of spinner
	         * @default hardest
	         */
	        color?: Stage.ColorProp;
	        /**
	         * Custom content
	         */
	        children?: React.ReactElement;
	        /**
	         * Shape of spinner's division
	         * @default square
	         */
	        shape?: 'square' | 'rounded' | 'round';
	        /**
	         * Spin speed
	         * @default 1
	         */
	        duration?: number;
	        /**
	         * Number of spinner's division
	         * @default 12
	         */
	        count?: number;
	        /**
	         * Sizes of spinner's container
	         * @default 1.125em
	         */
	        size?: string;
	    }
	    type Classes = {
	        /**
	         * Root element
	         */
	        container: void;
	        /**
	         * Wrapper for children component
	         */
	        children: void;
	    };
	}
	export default SpinnerTypes;

}
declare module '@stage-ui/core/content/Spinner/styles' {
	import Types from '@stage-ui/core/content/Spinner/types'; const createClasses: Stage.CreateClasses<Types.Classes, Types.Props>;
	export default createClasses;

}
declare module '@stage-ui/core/content/Spinner' {
	import React from 'react';
	import Types from '@stage-ui/core/content/Spinner/types'; const _default: React.ForwardRefExoticComponent<Types.Props & React.RefAttributes<HTMLDivElement>>;
	export default _default;

}
declare module '@stage-ui/core/basic/Typography/types' {
	import { Options } from '@stage-ui/system/hooks/useSystem';
	import CSS from 'csstype';
	import { BreakpointProp } from '@stage-ui/system/props/breakpoint'; namespace TypographyTypes {
	    interface LinkProps extends Props {
	        /**
	         * Prompts the user to save the linked URL instead of navigating to it
	         */
	        download?: string;
	        /**
	         * The URL that the hyperlink points to
	         */
	        href?: string;
	        /**
	         * Hints at the human language of the linked URL
	         */
	        hrefLang?: string;
	        /**
	         * Specifies what media/device the linked document is optimized for
	         */
	        media?: string;
	        /**
	         * A space-separated list of URLs
	         */
	        ping?: string;
	        /**
	         * The relationship of the linked URL as space-separated link types
	         */
	        rel?: string;
	        /**
	         * Where to display the linked URL
	         */
	        target?: string;
	        /**
	         * Hints at the linked URLâ€™s format with a MIME type
	         */
	        type?: string;
	        /**
	         * How much of the referrer to send when following the link
	         */
	        referrerPolicy?: string;
	    }
	    interface Props extends Omit<Stage.AllProps<HTMLDivElement, Classes>, 'textColor'> {
	        /**
	         * Capitalize first letter
	         */
	        capitalize?: boolean;
	        /**
	         * Overflow text shortening
	         */
	        ellipsis?: boolean;
	        /**
	         * Shorthand for text-decoration
	         */
	        decoration?: CSS.Properties['textDecoration'];
	        /**
	         * Content
	         */
	        children?: React.ReactNode;
	        /**
	         * Text color
	         */
	        color?: BreakpointProp<Stage.ColorProp>;
	        /**
	         * Shorthand for text-align
	         */
	        align?: BreakpointProp<CSS.Properties['textAlign']>;
	        /**
	         * Shorthand for font-weight
	         */
	        weight?: BreakpointProp<CSS.Properties['fontWeight']>;
	        /**
	         * Shorthand for font-size
	         * @default m
	         * @display Stage.Sizes
	         * @link /props/#size
	         */
	        size?: BreakpointProp<Stage.Sizes | (string & {
	            T?: string;
	        })>;
	        /**
	         * Shorthand for text-transform
	         */
	        transform?: BreakpointProp<CSS.Properties['textTransform']>;
	    }
	    type Classes = {
	        /**
	         * Root element
	         */
	        container: void;
	    };
	    interface PrivateProps extends LinkProps {
	        tag: string;
	        sizesOf: keyof Stage.ThemeAssets['typography'];
	        focus?: Options['focus'];
	        name: string;
	    }
	    type Ref = HTMLSpanElement | HTMLAnchorElement | HTMLParagraphElement;
	}
	export default TypographyTypes;

}
declare module '@stage-ui/core/basic/Typography/styles' {
	import Types from '@stage-ui/core/basic/Typography/types'; const createClasses: Stage.CreateClasses<Types.Classes, Types.PrivateProps>;
	export default createClasses;

}
declare module '@stage-ui/core/basic/Typography' {
	import Types from '@stage-ui/core/basic/Typography/types'; const _default: import("react").ForwardRefExoticComponent<Types.PrivateProps & import("react").RefAttributes<Types.Ref>>;
	export default _default;

}
declare module '@stage-ui/core/content/Header/types' {
	import TypographyTypes from '@stage-ui/@stage-ui/core/basic/Typography/types'; namespace HeaderTypes {
	    interface Props extends TypographyTypes.Props {
	    }
	    type Classes = TypographyTypes.Classes;
	}
	export default HeaderTypes;

}
declare module '@stage-ui/core/content/Header' {
	import React from 'react';
	import Types from '@stage-ui/core/content/Header/types'; const _default: React.ForwardRefExoticComponent<Types.Props & React.RefAttributes<HTMLSpanElement>>;
	export default _default;

}
declare module '@stage-ui/core/content/Paragraph/types' {
	import TypographyTypes from '@stage-ui/@stage-ui/core/basic/Typography/types'; namespace ParagraphTypes {
	    interface Props extends TypographyTypes.Props {
	    }
	    type Classes = TypographyTypes.Classes;
	}
	export default ParagraphTypes;

}
declare module '@stage-ui/core/content/Paragraph' {
	import React from 'react';
	import Types from '@stage-ui/core/content/Paragraph/types'; const _default: React.ForwardRefExoticComponent<Types.Props & React.RefAttributes<HTMLParagraphElement>>;
	export default _default;

}
declare module '@stage-ui/core/content/Text/types' {
	import TypographyTypes from '@stage-ui/@stage-ui/core/basic/Typography/types'; namespace TextTypes {
	    interface Props extends TypographyTypes.Props {
	    }
	    type Classes = TypographyTypes.Classes;
	}
	export default TextTypes;

}
declare module '@stage-ui/core/content/Text' {
	import React from 'react';
	import Types from '@stage-ui/core/content/Text/types'; const _default: React.ForwardRefExoticComponent<Types.Props & React.RefAttributes<HTMLSpanElement>>;
	export default _default;

}
declare module '@stage-ui/core/content/Link/types' {
	import TypographyTypes from '@stage-ui/@stage-ui/core/basic/Typography/types'; namespace LinkTypes {
	    interface Props extends TypographyTypes.LinkProps {
	    }
	    type Classes = TypographyTypes.Classes;
	}
	export default LinkTypes;

}
declare module '@stage-ui/core/content/Link' {
	import React from 'react';
	import Types from '@stage-ui/core/content/Link/types'; const _default: React.ForwardRefExoticComponent<Types.Props & React.RefAttributes<HTMLAnchorElement>>;
	export default _default;

}
declare module '@stage-ui/core/content/Toast/types' {
	 namespace ToastTypes {
	    interface Props extends Stage.AllProps<HTMLDivElement, Classes> {
	        /**
	         * Color of divider
	         * @default primary
	         */
	        color?: Stage.ColorProp;
	        /**
	         * Place for items to the right of children
	         */
	        rightChild?: React.ReactNode;
	        /**
	         * Place for items to the left of children
	         */
	        leftChild?: React.ReactNode;
	        /**
	         * Default content
	         */
	        children?: React.ReactNode;
	        /**
	         * Children alias
	         */
	        label?: React.ReactNode;
	    }
	    type Classes = {
	        /**
	         * Root element
	         */
	        container: void;
	        /**
	         * Children of container
	         */
	        content: void;
	        leftChild: void;
	        rightChild: void;
	    };
	}
	export default ToastTypes;

}
declare module '@stage-ui/core/content/Toast/styles' {
	import Types from '@stage-ui/core/content/Toast/types'; const styles: Stage.CreateClasses<Types.Classes, Types.Props>;
	export default styles;

}
declare module '@stage-ui/core/content/Toast' {
	import React from 'react';
	import Types from '@stage-ui/core/content/Toast/types'; const _default: React.ForwardRefExoticComponent<Types.Props & React.RefAttributes<HTMLDivElement>>;
	export default _default;

}
declare module '@stage-ui/core/control/Button/types' {
	 namespace ButtonTypes {
	    interface Props extends Stage.AllProps<HTMLButtonElement, Classes> {
	        /**
	         * Specifies that the button should have input focus when the page loads
	         */
	        autoFocus?: boolean;
	        /**
	         * Prevents the user from interacting with the button
	         */
	        disabled?: boolean;
	        /**
	         * The <form> element to associate the button with
	         */
	        form?: string;
	        /**
	         * The URL that processes the information submitted by the button
	         */
	        formAction?: string;
	        /**
	         * If the button is a submit button, specifies how to encode the form data that is submitted
	         */
	        formEncType?: string;
	        /**
	         * If the button is a submit button, this attribute specifies the HTTP method used to submit the form
	         */
	        formMethod?: string;
	        /**
	         * If the button is a submit button, this Boolean attribute specifies that the form
	         * is not to be validated when it is submitted
	         */
	        formNoValidate?: boolean;
	        /**
	         * If the button is a submit button, this attribute is a author-defined name or standardized, unders@stage-ui/core
	         * prefixed keyword indicating where to display the response from submitting the form
	         */
	        formTarget?: string;
	        /**
	         * The name of the button, submitted as a pair with the buttonâ€™s value as part of the form data
	         */
	        name?: string;
	        /**
	         * The default behavior of the button
	         */
	        type?: 'submit' | 'reset' | 'button';
	        /**
	         * Defines the value associated with the buttonâ€™s name when itâ€™s submitted with the form data
	         */
	        value?: string | string[] | number;
	        /**
	         * Sizes of button
	         * @display Sizes
	         * @link /props/#size
	         * @default m
	         */
	        size?: Stage.Sizes;
	        /**
	         * Defines how button look
	         * @default filled
	         */
	        decoration?: 'filled' | 'outline' | 'text' | 'plain';
	        /**
	         * Shape of button
	         * @default rounded
	         */
	        shape?: 'square' | 'rounded' | 'round';
	        /**
	         * Make button's text uppercase
	         */
	        uppercase?: boolean;
	        /**
	         * Color of button
	         */
	        color?: Stage.ColorProp;
	        /**
	         * Button's label
	         */
	        label?: React.ReactNode;
	        /**
	         * same as label
	         */
	        children?: React.ReactNode;
	        /**
	         * Place for items to the right of children
	         */
	        rightChild?: React.ReactNode;
	        /**
	         * Place for items to the left of children
	         */
	        leftChild?: React.ReactNode;
	    }
	    type Classes = {
	        /**
	         * Root element
	         */
	        container: void;
	        /**
	         * Content's wrappers
	         */
	        child: {
	            align: 'left' | 'right';
	        };
	    };
	}
	export default ButtonTypes;

}
declare module '@stage-ui/core/control/Button/styles' {
	import Types from '@stage-ui/core/control/Button/types'; const styles: Stage.CreateClasses<Types.Classes, Types.Props>;
	export default styles;

}
declare module '@stage-ui/core/control/Button' {
	import React from 'react';
	import Types from '@stage-ui/core/control/Button/types'; const _default: React.ForwardRefExoticComponent<Types.Props & React.RefAttributes<HTMLButtonElement>>;
	export default _default;

}
declare module '@stage-ui/core/control/Calendar/types' {
	import { Moment } from 'moment';
	import { CSSProperties } from 'react';
	import { Classes as ClassesType } from '@stage-ui/system/hooks/useSystem'; namespace CalendarTypes {
	    /**
	     * Type of calendar view
	     */
	    type GridType = 'year' | 'month' | 'day' | 'week';
	    /**
	     * Calendar locale
	     */
	    type Locale = 'en' | 'ru' | 'it' | 'fr' | 'de';
	    /**
	     * Custom render options
	     */
	    type RenderOptions = {
	        now: Moment;
	        self: Moment;
	        active: Moment;
	        isActive: boolean;
	        isCurrent: boolean;
	        isDisabled: boolean;
	        onClick: () => void;
	    };
	    /**
	     * Options for prop onMonthRender
	     */
	    type YearRenderOptions = RenderOptions;
	    /**
	     * Options for prop onMonthRender
	     */
	    type MonthRenderOptions = RenderOptions;
	    /**
	     * Options for prop onDayRender
	     */
	    type DayRenderOptions = RenderOptions & {
	        isCurrentMonth: boolean;
	    };
	    interface Props extends Omit<Stage.AllProps<HTMLDivElement, Classes>, 'onChange'> {
	        /**
	         * Type for Calendar
	         * @default day
	         */
	        type?: GridType;
	        /**
	         * Date or Moment value for controlled component
	         */
	        value?: Moment | Date;
	        /**
	         * Date or Moment value for uncontrolled component
	         */
	        defaultValue?: Moment | Date;
	        /**
	         * Min datetime that could be selected
	         */
	        minValue?: Moment | Date;
	        /**
	         * Max datetime that could be selected
	         */
	        maxValue?: Moment | Date;
	        /**
	         * Callback will fire on user click day
	         * moment date will be current date that
	         * used just did set
	         */
	        onChange?: (moment: Moment) => void;
	        /**
	         * Callback will fire when user change any view at calendary
	         * moment date will be temp date
	         */
	        onViewChange?: (moment: Moment) => void;
	        /**
	         * @default ru
	         */
	        locale?: Locale;
	        /**
	         * Hide today button
	         */
	        hideToday?: boolean;
	        /**
	         * Hide neighbor months days
	         */
	        hideNeighborMonths?: boolean;
	        /**
	         * Custom render Year
	         */
	        onYearRender?: (options: YearRenderOptions) => React.ReactNode;
	        /**
	         * Custom render Month
	         */
	        onMonthRender?: (options: MonthRenderOptions) => React.ReactNode;
	        /**
	         * Custom render Day
	         */
	        onDayRender?: (options: DayRenderOptions) => React.ReactNode;
	        /**
	         * Header element
	         */
	        header?: React.ReactNode;
	        /**
	         * Footer element
	         */
	        footer?: React.ReactNode;
	    }
	    interface DateGridProps {
	        attributes: any;
	        styleProps: any;
	        hideToday: boolean;
	        hideNeighborMonths: boolean;
	        value: Moment;
	        minValue: Moment;
	        maxValue: Moment;
	        onChange: (date: Moment) => void;
	        onViewChange?: (date: Moment) => void;
	        classes: ClassesType<Classes>;
	        type: GridType;
	        onYearRender?: (options: YearRenderOptions) => React.ReactNode;
	        onMonthRender?: (options: MonthRenderOptions) => React.ReactNode;
	        onDayRender?: (options: DayRenderOptions) => React.ReactNode;
	        header?: React.ReactNode;
	        footer?: React.ReactNode;
	    }
	    interface DateGridCalendarProps {
	        type: GridType;
	        minValue: Moment;
	        maxValue: Moment;
	        onClick: () => void;
	        style?: CSSProperties;
	        classes: ClassesType<Classes>;
	    }
	    interface DateGridDayProps extends Omit<DateGridCalendarProps, 'onClick'> {
	        hideNeighborMonths: boolean;
	        day: Moment;
	        tmp: Moment;
	        active: Moment;
	        onDayRender?: (options: DayRenderOptions) => React.ReactNode;
	        onClick: (day: Moment) => void;
	    }
	    interface DateGridWeekProps extends Omit<DateGridDayProps, 'day'> {
	        week: Moment[];
	    }
	    interface DateGridMonthProps extends DateGridCalendarProps {
	        value: Moment;
	        tmp: Moment;
	        active: Moment;
	        onMonthRender?: (options: MonthRenderOptions) => React.ReactNode;
	    }
	    interface DateGridYearProps extends DateGridCalendarProps {
	        value: Moment;
	        tmp: Moment;
	        active: Moment;
	        onYearRender?: (options: YearRenderOptions) => React.ReactNode;
	    }
	    interface DateGridTitleProps {
	        value: Moment;
	        minValue: Moment;
	        maxValue: Moment;
	        gridType: GridType;
	        onNext: () => void;
	        onPrevious: () => void;
	        onGridTypeChange: (type: GridType) => void;
	        classes: ClassesType<Classes>;
	    }
	    type Classes = {
	        /**
	         * Root container
	         */
	        dateGrid: void;
	        /**
	         * Days of week block
	         */
	        weekDay: void;
	        /**
	         * Each square month or year block
	         */
	        monthOrYear: {
	            isActive: boolean;
	            isCurrent: boolean;
	            isDisabled: boolean;
	        };
	        /**
	         * Each square week block
	         */
	        week: {
	            isCurrent: boolean;
	            isActive: boolean;
	            isWeekType: boolean;
	        };
	        /**
	         * Each square day block
	         * for day/week view
	         */
	        day: {
	            isActive: boolean;
	            isCurrent: boolean;
	            isDisabled: boolean;
	            isHidden: boolean;
	            isCurrentMonth: boolean;
	            isWeekend?: boolean;
	            isWeekType?: boolean;
	        };
	    };
	}
	export default CalendarTypes;

}
declare module '@stage-ui/core/control/Calendar/DateGridMonth' {
	import CalendarTypes from '@stage-ui/core/control/Calendar/types'; const DateGridMonth: (props: CalendarTypes.DateGridMonthProps) => import("@emotion/react/jsx-runtime").JSX.Element;
	export default DateGridMonth;

}
declare module '@stage-ui/core/control/Calendar/DateGridTitle' {
	import CalendarTypes from '@stage-ui/core/control/Calendar/types'; const DateGridTitle: (props: CalendarTypes.DateGridTitleProps) => import("@emotion/react/jsx-runtime").JSX.Element;
	export default DateGridTitle;

}
declare module '@stage-ui/core/control/Calendar/DateGridDay' {
	import T from '@stage-ui/core/control/Calendar/types'; const DateGridDay: (props: T.DateGridDayProps) => import("@emotion/react/jsx-runtime").JSX.Element;
	export default DateGridDay;

}
declare module '@stage-ui/core/control/Calendar/DateGridWeek' {
	import T from '@stage-ui/core/control/Calendar/types'; const DateGridWeek: (props: T.DateGridWeekProps) => import("@emotion/react/jsx-runtime").JSX.Element;
	export default DateGridWeek;

}
declare module '@stage-ui/core/control/Calendar/DateGridYear' {
	import CalendarTypes from '@stage-ui/core/control/Calendar/types'; const DateGridYear: (props: CalendarTypes.DateGridYearProps) => import("@emotion/react/jsx-runtime").JSX.Element;
	export default DateGridYear;

}
declare module '@stage-ui/core/control/Calendar/DateGrid' {
	import T from '@stage-ui/core/control/Calendar/types'; const DateGrid: (props: T.DateGridProps) => import("@emotion/react/jsx-runtime").JSX.Element;
	export default DateGrid;

}
declare module '@stage-ui/core/control/Calendar/styles' {
	import Types from '@stage-ui/core/control/Calendar/types'; const styles: Stage.CreateClasses<Types.Classes, Types.Props>;
	export default styles;

}
declare module '@stage-ui/core/control/Calendar' {
	import React from 'react';
	import Types from '@stage-ui/core/control/Calendar/types'; const _default: React.ForwardRefExoticComponent<Types.Props & React.RefAttributes<HTMLDivElement>>;
	export default _default;

}
declare module '@stage-ui/core/basic/Check/types' {
	import { ClassesSchemaDefinition } from '@stage-ui/system/hooks/useSystem'; namespace CheckTypes {
	    interface Props<Element = HTMLDivElement, ClassesOveddides extends ClassesSchemaDefinition = Classes> extends Stage.AllProps<Element, ClassesOveddides> {
	        label?: string;
	        labelColor?: Stage.ColorProp;
	        checked?: boolean;
	        disabled?: boolean;
	        defaultValue?: boolean;
	        uppercase?: boolean;
	        size?: Stage.Sizes;
	        onChange?: (state: boolean) => void;
	    }
	    interface PrivateProps extends Props {
	        name?: string;
	        children: (checked: boolean) => React.ReactElement;
	    }
	    type Classes = {
	        container: void;
	        label: void;
	    };
	}
	export default CheckTypes;

}
declare module '@stage-ui/core/basic/Check/styles' {
	import Types from '@stage-ui/core/basic/Check/types'; const createClasses: Stage.CreateClasses<Types.Classes, Types.Props>;
	export default createClasses;

}
declare module '@stage-ui/core/basic/Check' {
	import React from 'react';
	import CheckTypes from '@stage-ui/core/basic/Check/types'; const _default: React.ForwardRefExoticComponent<CheckTypes.PrivateProps & React.RefAttributes<HTMLDivElement>>;
	export default _default;

}
declare module '@stage-ui/core/control/Checkbox/types' {
	import CheckTypes from '@stage-ui/@stage-ui/core/basic/Check/types'; namespace CheckboxTypes {
	    interface Props extends CheckTypes.Props<HTMLDivElement, Classes> {
	    }
	    type ClassState = {
	        checked: Props['checked'];
	    };
	    type Classes = {
	        /**
	         * Checkbox container
	         */
	        check: ClassState;
	        /**
	         * Icon of checkbox
	         */
	        icon: ClassState;
	    } & Partial<CheckTypes.Classes>;
	}
	export default CheckboxTypes;

}
declare module '@stage-ui/core/control/Checkbox/styles' {
	import Types from '@stage-ui/core/control/Checkbox/types'; const createClasses: Stage.CreateClasses<Types.Classes, Types.Props>;
	export default createClasses;

}
declare module '@stage-ui/core/control/Checkbox' {
	import React from 'react';
	import Types from '@stage-ui/core/control/Checkbox/types'; const _default: React.ForwardRefExoticComponent<Types.Props & React.RefAttributes<HTMLDivElement>>;
	export default _default;

}
declare module '@stage-ui/core/hooks/useMask' {
	import IMask from 'imask'; const _default: (ref: React.RefObject<HTMLInputElement>, masked: IMask.AnyMaskedOptions) => IMask.InputMask<IMask.AnyMaskedOptions>;
	export default _default;

}
declare module '@stage-ui/core/basic/Field/types' {
	import { ClassesSchemaDefinition } from '@stage-ui/system/hooks/useSystem';
	import React from 'react'; namespace FieldTypes {
	    interface PrivateProps extends Props {
	        name?: string;
	        children?: React.ReactNode;
	    }
	    interface Props<Element = HTMLInputElement, ClassesDefinition extends ClassesSchemaDefinition = Classes> extends Stage.AllProps<Element, ClassesDefinition> {
	        /**
	         * Label for field
	         */
	        label?: React.ReactNode;
	        /**
	         * Define where label be placed
	         */
	        labelType?: 'none' | 'outside' | 'inside';
	        /**
	         * Place for hint content
	         */
	        hint?: React.ReactNode;
	        /**
	         * Place for error content
	         */
	        error?: React.ReactNode;
	        /**
	         * Sizes of field
	         * @default m
	         * @display Sizes
	         * @link /props/#size
	         */
	        size?: Stage.Sizes;
	        /**
	         * Defines how field look
	         * @default filled
	         */
	        decoration?: 'none' | 'filled' | 'underline' | 'outline';
	        /**
	         * Color of field
	         * @default surface
	         */
	        color?: Stage.ColorProp;
	        /**
	         * Shape of field
	         * @default rounded
	         */
	        shape?: 'round' | 'rounded' | 'square';
	        /**
	         * Prevents the user from interacting
	         */
	        disabled?: boolean;
	        /**
	         * Place for items to the left of value
	         */
	        rightChild?: React.ReactNode;
	        /**
	         * Place for items to the left of value
	         */
	        leftChild?: React.ReactNode;
	        /**
	         * Allow user clear value
	         */
	        clearable?: boolean;
	        /**
	         * Event is fired when user clear value
	         */
	        onClear?: () => void;
	    }
	    type Classes = {
	        /**
	         * Root element
	         */
	        container: void;
	        /**
	         * Container of field
	         */
	        field: void;
	        /**
	         * Container of field content
	         */
	        content: void;
	        /**
	         * Label element
	         */
	        label: void;
	        /**
	         * Container for left and right childs
	         */
	        child: {
	            align: 'right' | 'left';
	        };
	        /**
	         * The button that clear value
	         */
	        clearButton: void;
	        /**
	         * Container of hint
	         */
	        hint: void;
	        /**
	         * Container of error
	         */
	        error: void;
	    };
	}
	export default FieldTypes;

}
declare module '@stage-ui/core/basic/Field/styles' {
	import Types from '@stage-ui/core/basic/Field/types'; const createClasses: Stage.CreateClasses<Types.Classes, Types.Props>;
	export default createClasses;

}
declare module '@stage-ui/core/basic/Field' {
	import React from 'react';
	import Types from '@stage-ui/core/basic/Field/types'; const _default: React.ForwardRefExoticComponent<Types.PrivateProps & React.RefAttributes<HTMLDivElement>>;
	export default _default;

}
declare module '@stage-ui/core/layout/Drop/types' {
	import { AllEventProps, AttributeProps, BorderProps, ColorProps, CoreProps, LayoutProps, PaddingProps } from '@stage-ui/system/props/types'; namespace DropTypes {
	    interface TargetCoordinates {
	        top: number;
	        bottom: number;
	        left: number;
	        right: number;
	    }
	    interface Props extends AttributeProps, AllEventProps<HTMLDivElement>, CoreProps<Classes, HTMLDivElement>, ColorProps, BorderProps, PaddingProps, LayoutProps {
	        /**
	         * Ref of the target element near which the drop will be shown
	         */
	        target?: React.RefObject<HTMLElement>;
	        /**
	         * Will mount or unmount drop
	         * @default true
	         */
	        visible?: boolean;
	        /**
	         * The side of the target element on which the drop will be shown
	         */
	        align?: 'top' | 'bottom' | 'left' | 'right' | 'auto-vertical';
	        /**
	         * Side drop positioning
	         */
	        justify?: 'start' | 'center' | 'end' | 'start-outside' | 'end-outside';
	        /**
	         * Open/Close animation type
	         * @default slide
	         */
	        animation?: {
	            /**
	             * type of animation
	             * @default none
	             */
	            type: 'fade' | 'slide' | 'collapse' | 'none';
	            /**
	             * duration in ms
	             * @default 100
	             */
	            duration?: number;
	            /**
	             * reverse animation for 'slide' & 'collapse'
	             * @default false
	             */
	            reverse?: boolean;
	        };
	        /**
	         * Stretch drop by target width
	         */
	        stretchWidth?: boolean;
	        /**
	         * Stretch drop by target height
	         */
	        stretchHeight?: boolean;
	        /**
	         * Place drop under coursor
	         */
	        stickCursor?: boolean;
	        /**
	         * Distance between target and drop
	         */
	        spacing?: number;
	        /**
	         * Fired when mouse clicks outside drop
	         */
	        onClickOutside?: (event: MouseEvent, outsideTarget?: boolean) => void;
	        /**
	         * Drop's content
	         */
	        children?: React.ReactNode;
	    }
	    interface Ref extends Partial<HTMLDivElement> {
	        /**
	         * Update position of drop (useful when target changes origins and sizes)
	         */
	        updatePosition: () => void;
	        /**
	         * Change visible state of drop
	         */
	        setVisible: (state: boolean) => void;
	    }
	    type Classes = {
	        /**
	         * Root element
	         */
	        container: void;
	    };
	}
	export default DropTypes;

}
declare module '@stage-ui/core/layout/Drop/animation' {
	import Types from '@stage-ui/core/layout/Drop/types'; type AnimationProp = Exclude<Types.Props['animation'], undefined>; type AlignProp = Types.Props['align'];
	export default class DropAnimation {
	    style: CSSStyleDeclaration;
	    enabled: boolean;
	    align: AlignProp;
	    type: AnimationProp['type'];
	    duration: Exclude<AnimationProp['duration'], undefined>;
	    reverse: AnimationProp['reverse'];
	    isHorizontal: boolean;
	    constructor(props: Types.Props, style: CSSStyleDeclaration);
	    animateIn(): void;
	    animateOut(): void;
	}
	export {};

}
declare module '@stage-ui/core/layout/Drop/styles' {
	import Types from '@stage-ui/core/layout/Drop/types'; const createClasses: Stage.CreateClasses<Types.Classes, Types.Props>;
	export default createClasses;

}
declare module '@stage-ui/core/utils/SharedZIndex' {
	/**
	 * Shared zIndex for Drops & Modals
	 */
	export default class SharedZIndex {
	    private static index;
	    static get increment(): number;
	}

}
declare module '@stage-ui/core/layout/Drop' {
	import React from 'react';
	import Types from '@stage-ui/core/layout/Drop/types'; const _default: React.ForwardRefExoticComponent<Types.Props & React.RefAttributes<Types.Ref>>;
	export default _default;

}
declare module '@stage-ui/core/layout/Popover/types' {
	import CSS from 'csstype'; namespace PopoverTypes {
	    interface Props extends Stage.AllProps<HTMLDivElement, Classes> {
	        /**
	         * Alignment of popover's arrow
	         */
	        align?: 'top' | 'bottom' | 'left' | 'right' | 'none';
	        /**
	         * Color of popover's border
	         */
	        borderColor?: Stage.ColorProp;
	        /**
	         * Color of popover's background
	         */
	        backgroundColor?: Stage.ColorProp;
	        /**
	         * Popover's content
	         */
	        children?: React.ReactNode;
	        /**
	         * offset arrow position
	         */
	        arrowOffset?: CSS.Properties['height'];
	        /**
	         * Width/height of popover's arrow
	         */
	        arrowSize?: CSS.Properties['width'];
	    }
	    type Classes = {
	        /**
	         * Root element
	         */
	        container: void;
	        /**
	         * Arrow container
	         */
	        arrow: {
	            align: Props['align'];
	        };
	    };
	}
	export default PopoverTypes;

}
declare module '@stage-ui/core/layout/Popover/styles' {
	import Types from '@stage-ui/core/layout/Popover/types'; const createClasses: Stage.CreateClasses<Types.Classes, Types.Props>;
	export default createClasses;

}
declare module '@stage-ui/core/layout/Popover' {
	import React from 'react';
	import Types from '@stage-ui/core/layout/Popover/types'; const _default: React.ForwardRefExoticComponent<Types.Props & React.RefAttributes<HTMLDivElement>>;
	export default _default;

}
declare module '@stage-ui/core/control/DatePicker/mask' {
	import { Moment } from 'moment'; const _default: (format: string, min: Moment, max: Moment) => any;
	export default _default;

}
declare module '@stage-ui/core/control/DatePicker/types' {
	import { Moment } from 'moment';
	import CalendarTypes from '@stage-ui/@stage-ui/core/control/Calendar/types';
	import FieldTypes from '@stage-ui/core/basic/Field/types'; namespace DatePickerTypes {
	    interface Props extends FieldTypes.Props<HTMLInputElement, Classes>, InputProps {
	        /**
	         * Type for DatePicker
	         * @default day
	         */
	        type?: CalendarTypes.GridType;
	        /**
	         * Property value could be a string
	         * if you pass format property aswell
	         * otherwise value should be instance of Date
	         */
	        value?: Moment | Date | string;
	        defaultValue?: Moment | Date | string;
	        /**
	         * Format moment YYYY-MM-DD
	         * @default YYYY-MM-DD
	         */
	        format?: string;
	        /**
	         * Min datetime that could be selected
	         */
	        minValue?: Moment | Date | string;
	        /**
	         * Max datetime that could be selected
	         */
	        maxValue?: Moment | Date | string;
	        /**
	         * Callback function will with Date object
	         * or string if format property was passed.
	         */
	        onChange?: (moment: Moment, value: string) => void;
	        /**
	         * Do not close datepicker on change
	         * latest value
	         */
	        stayOpen?: boolean;
	        /**
	         * Enable mask input
	         */
	        masked?: boolean;
	        /**
	         * @default ru
	         */
	        locale?: CalendarTypes.Locale;
	        /**
	         * Hide today button
	         */
	        hideToday?: boolean;
	    }
	    interface InputProps {
	        autoComplete?: string;
	        autoFocus?: boolean;
	        list?: string;
	        name?: string;
	        placeholder?: string;
	        pattern?: string;
	        readOnly?: boolean;
	        required?: boolean;
	        form?: string;
	        formAction?: string;
	        formEncType?: string;
	        formMethod?: string;
	        formNoValidate?: boolean;
	        formTarget?: string;
	    }
	    type Classes = {
	        /**
	         * Drop view
	         */
	        drop: {
	            isActive: boolean;
	        };
	        /**
	         * Input view
	         */
	        input: void;
	    } & Partial<FieldTypes.Classes>;
	}
	export default DatePickerTypes;

}
declare module '@stage-ui/core/control/DatePicker/styles' {
	import Types from '@stage-ui/core/control/DatePicker/types'; const createClasses: Stage.CreateClasses<Types.Classes, Types.Props>;
	export default createClasses;

}
declare module '@stage-ui/core/control/DatePicker' {
	import React from 'react';
	import Types from '@stage-ui/core/control/DatePicker/types'; const _default: React.ForwardRefExoticComponent<Types.Props & React.RefAttributes<HTMLDivElement>>;
	export default _default;

}
declare module '@stage-ui/core/control/Menu/types' {
	 namespace MenuTypes {
	    type MenuValue = string | number;
	    type MenuDirection = 'row' | 'column' | 'row-reverse' | 'column-reverse';
	    type MenuDecoration = 'filled' | 'color' | 'marker' | 'marker-reverse';
	    type MenuAlign = 'flex-start' | 'flex-end' | 'stretch' | 'center';
	    type MenuShape = 'square' | 'rounded' | 'round';
	    interface Context {
	        values: Record<string, () => void>;
	        current?: MenuValue;
	        controlled?: boolean;
	        onChange?: (value?: MenuValue) => void;
	        itemAs?: keyof HTMLElementTagNameMap;
	    }
	    interface Props extends Stage.AllProps<HTMLDivElement, Classes> {
	        /**
	         * Value selected by default
	         */
	        defaultValue?: MenuValue;
	        /**
	         * Current selected value for controlled component
	         */
	        value?: MenuValue;
	        /**
	         * Simple data items, you can use <Menu.Item/> insted
	         */
	        data?: React.ReactNode[];
	        /**
	         * Calls on value change
	         */
	        onChange?: (value?: MenuValue) => void;
	        /**
	         * Display as column
	         * @default false
	         */
	        column?: boolean;
	        /**
	         * Defines how button look
	         * @default filled
	         */
	        decoration?: MenuDecoration;
	        /**
	         * Flex direction of menu
	         * @default row
	         */
	        direction?: MenuDirection;
	        /**
	         * Shape of each item
	         * @default square
	         */
	        shape?: MenuShape;
	        /**
	         * Sizes of each item
	         * @default m
	         * @display Sizes
	         * @link /props/#size
	         */
	        size?: Stage.Sizes;
	        /**
	         * Flex align
	         * @default flex-start
	         */
	        align?: MenuAlign;
	        /**
	         * Menu Items
	         */
	        children?: React.ReactNode;
	        /**
	         * HTML element which will be used for an MenuItems
	         */
	        itemAs?: keyof HTMLElementTagNameMap;
	    }
	    type ClassState = {
	        decoration: Props['decoration'];
	    };
	    type Classes = {
	        /**
	         * Root container
	         */
	        container: ClassState;
	        /**
	         * Menu item container
	         */
	        item: ClassState;
	        /**
	         * Group title container
	         */
	        group: ClassState;
	        /**
	         * Group title text
	         */
	        groupTitle: ClassState;
	        /**
	         * Submenu container
	         */
	        subMenu: ClassState;
	        /**
	         * Submenu content view
	         */
	        subMenuContent: ClassState;
	        /**
	         * Submenu arrow icon
	         */
	        subMenuArrow: ClassState;
	        /**
	         * Left child at menu item
	         */
	        leftChild: ClassState;
	        /**
	         * Middle child at menu item
	         */
	        middleChild: ClassState;
	        /**
	         * Right child at menu item
	         */
	        rightChild: ClassState;
	    };
	}
	export default MenuTypes;

}
declare module '@stage-ui/core/control/Menu/MenuItem/types' {
	import MenuTypes from '@stage-ui/core/control/Menu/types'; namespace MenuItemTypes {
	    interface Props extends Omit<Stage.AllProps<HTMLDivElement, Classes>, 'onChange'> {
	        /**
	         * Controlled item state
	         */
	        active?: boolean;
	        /**
	         * Display title of current item
	         */
	        title?: React.ReactNode;
	        /**
	         * Disables item
	         * @default false
	         */
	        disabled?: boolean;
	        /**
	         * Item value, onChange will not call if empty
	         */
	        value?: MenuTypes.MenuValue;
	        /**
	         * Item view custom content
	         */
	        children?: React.ReactNode;
	        /**
	         * Left child at item view
	         */
	        leftChild?: React.ReactNode;
	        /**
	         * Left child at item view
	         */
	        rightChild?: React.ReactNode;
	        /**
	         * HTML element which is used as a container
	         */
	        as?: keyof HTMLElementTagNameMap;
	        /**
	         * Only for Anchors
	         */
	        href?: string;
	    }
	    type Classes = {
	        /**
	         * Item view
	         */
	        container: void;
	    };
	}
	export default MenuItemTypes;

}
declare module '@stage-ui/core/control/Menu/MenuItem/styles' {
	import Types from '@stage-ui/core/control/Menu/MenuItem/types'; const createClasses: Stage.CreateClasses<Types.Classes, Types.Props>;
	export default createClasses;

}
declare module '@stage-ui/core/control/Menu/MenuItem' {
	import React from 'react';
	import Types from '@stage-ui/core/control/Menu/MenuItem/types'; const _default: React.ForwardRefExoticComponent<Types.Props & React.RefAttributes<HTMLDivElement>>;
	export default _default;

}
declare module '@stage-ui/core/control/Menu/MenuGroup/types' {
	 namespace MenuGroupTypes {
	    interface Props extends Omit<Stage.AllProps<HTMLDivElement, Classes>, 'onChange'> {
	        /**
	         * Title of group
	         */
	        title: React.ReactNode;
	        children?: React.ReactNode;
	        /**
	         * Left child at group view
	         */
	        leftChild?: React.ReactNode;
	        /**
	         * Right child at group view
	         */
	        rightChild?: React.ReactNode;
	    }
	    type Classes = {
	        /**
	         * Group view
	         */
	        container: void;
	    };
	}
	export default MenuGroupTypes;

}
declare module '@stage-ui/core/control/Menu/MenuGroup/styles' {
	import Types from '@stage-ui/core/control/Menu/MenuGroup/types'; const createClasses: Stage.CreateClasses<Types.Classes, Types.Props>;
	export default createClasses;

}
declare module '@stage-ui/core/control/Menu/MenuGroup' {
	import React from 'react';
	import Types from '@stage-ui/core/control/Menu/MenuGroup/types'; const _default: React.ForwardRefExoticComponent<Types.Props & React.RefAttributes<HTMLDivElement>>;
	export default _default;

}
declare module '@stage-ui/core/control/Menu/styles' {
	import Types from '@stage-ui/core/control/Menu/types'; const createClasses: Stage.CreateClasses<Types.Classes, Types.Props>;
	export default createClasses;

}
declare module '@stage-ui/core/control/Menu/Submenu/types' {
	 namespace SubmenuTypes {
	    interface Props extends Omit<Stage.AllProps<HTMLDivElement, Classes>, 'onChange'> {
	        /**
	         * Title for menu item
	         */
	        title?: React.ReactNode;
	        /**
	         * Turn submenu off
	         * @default false
	         */
	        disabled?: boolean;
	        /**
	         * Indent at left size
	         */
	        indent?: string;
	        /**
	         * Open state, for controlled component
	         */
	        open?: boolean;
	        /**
	         * Default open state
	         */
	        defaultOpen?: boolean;
	        /**
	         * Submenu items
	         */
	        children?: React.ReactNode;
	        /**
	         * Left child at submenu view
	         */
	        leftChild?: React.ReactNode;
	        /**
	         * Left child at submenu view
	         */
	        rightChild?: React.ReactNode;
	    }
	    type Classes = {
	        /**
	         * Root view
	         */
	        container: void;
	    };
	}
	export default SubmenuTypes;

}
declare module '@stage-ui/core/control/Menu/Submenu/styles' {
	import Types from '@stage-ui/core/control/Menu/Submenu/types'; const createClasses: Stage.CreateClasses<Types.Classes, Types.Props>;
	export default createClasses;

}
declare module '@stage-ui/core/control/Menu/Submenu' {
	import React from 'react';
	import Types from '@stage-ui/core/control/Menu/Submenu/types'; const _default: React.ForwardRefExoticComponent<Types.Props & React.RefAttributes<HTMLDivElement>>;
	export default _default;

}
declare module '@stage-ui/core/control/Menu' {
	import React from 'react';
	import MenuItemTypes from '@stage-ui/core/control/Menu/MenuItem/types';
	import MenuGroupTypes from '@stage-ui/core/control/Menu/MenuGroup/types';
	import SubmenuTypes from '@stage-ui/core/control/Menu/Submenu/types';
	import Types from '@stage-ui/core/control/Menu/types'; const Context: React.Context<Types.Context>;
	/**
	 * Hook used in every Menu.Item
	 * most optimized method to change item value
	 */
	export const useValue: (value?: Types.MenuValue | undefined) => [boolean, () => void, Types.Context]; type ComplexMenu = React.ForwardRefExoticComponent<Types.Props & React.RefAttributes<HTMLDivElement>> & {
	    Item: React.ForwardRefExoticComponent<MenuItemTypes.Props & React.RefAttributes<HTMLDivElement>>;
	    Group: React.ForwardRefExoticComponent<MenuGroupTypes.Props & React.RefAttributes<HTMLDivElement>>;
	    Submenu: React.ForwardRefExoticComponent<SubmenuTypes.Props & React.RefAttributes<HTMLDivElement>>;
	}; const _default: ComplexMenu;
	export default _default;

}
declare module '@stage-ui/core/control/Radio/types' {
	import CheckTypes from '@stage-ui/core/basic/Check/types'; namespace RadioTypes {
	    interface Props extends CheckTypes.Props<HTMLDivElement, Classes> {
	    }
	    type ClassState = {
	        checked: Props['checked'];
	    };
	    type Classes = {
	        /**
	         * Radio container
	         */
	        check: ClassState;
	        /**
	         * Icon of Radio
	         */
	        radio: ClassState;
	    } & Partial<CheckTypes.Classes>;
	}
	export default RadioTypes;

}
declare module '@stage-ui/core/control/Radio/styles' {
	import Types from '@stage-ui/core/control/Radio/types'; const createClasses: Stage.CreateClasses<Types.Classes, Types.Props>;
	export default createClasses;

}
declare module '@stage-ui/core/control/Radio' {
	import React from 'react';
	import Types from '@stage-ui/core/control/Radio/types'; const _default: React.ForwardRefExoticComponent<Types.Props & React.RefAttributes<HTMLDivElement>>;
	export default _default;

}
declare module '@stage-ui/core/control/Range/types' {
	 namespace RangeTypes {
	    interface Props extends Omit<Stage.AllProps<HTMLDivElement, Classes>, 'onChange'> {
	        min?: number;
	        max?: number;
	        defaultValue?: number;
	        value?: number;
	        onChange?: (value: number) => void;
	        mode?: 'single' | 'range';
	        className?: string;
	    }
	    interface Ref {
	        container: HTMLDivElement;
	        setValue: (value: number) => void;
	    }
	    type Classes = {
	        container: void;
	        rail: void;
	        track: void;
	        thumb: void;
	    };
	}
	export default RangeTypes;

}
declare module '@stage-ui/core/control/Range/styles' {
	import Types from '@stage-ui/core/control/Range/types'; const createClasses: Stage.CreateClasses<Types.Classes, Types.Props>;
	export default createClasses;

}
declare module '@stage-ui/core/control/Range' {
	import React from 'react';
	import Types from '@stage-ui/core/control/Range/types'; const _default: React.ForwardRefExoticComponent<Types.Props & React.RefAttributes<Types.Ref>>;
	export default _default;

}
declare module '@stage-ui/core/control/Pageswitch/types' {
	 namespace PageswitchTypes {
	    interface Props extends Omit<Stage.AllProps<HTMLDivElement, Classes>, 'onChange'> {
	        /**
	         * Total count of records
	         */
	        length: number;
	        /**
	         * Calls on page changed
	         */
	        onChange?: (pageNumber: number, startIndex: number) => void;
	        /**
	         * Records on page
	         * @default 20
	         */
	        pageSize?: number;
	        /**
	         * Current page number, for controlled component
	         */
	        value?: number;
	        /**
	         * Default page number
	         */
	        defaultValue?: number;
	    }
	    type Classes = {
	        /**
	         * Root container
	         */
	        container: void;
	        /**
	         * Left/Right buttons
	         */
	        arrowButton: {
	            disabled: boolean;
	        };
	    };
	}
	export default PageswitchTypes;

}
declare module '@stage-ui/core/control/Pageswitch/styles' {
	import Types from '@stage-ui/core/control/Pageswitch/types'; const createClasses: Stage.CreateClasses<Types.Classes, Types.Props>;
	export default createClasses;

}
declare module '@stage-ui/core/control/Pageswitch' {
	import React from 'react';
	import Types from '@stage-ui/core/control/Pageswitch/types'; const _default: React.ForwardRefExoticComponent<Types.Props & React.RefAttributes<HTMLDivElement>>;
	export default _default;

}
declare module '@stage-ui/core/control/Select/types' {
	import React from 'react';
	import FieldTypes from '@stage-ui/core/basic/Field/types';
	import DropTypes from '@stage-ui/core/layout/Drop/types'; namespace SelectTypes {
	    interface Option<T = string | number> {
	        text: string;
	        value: T;
	    }
	    interface Ref {
	        isOpen: boolean;
	        options: Option[];
	        values: Option[];
	        toggleOpen: () => void;
	    }
	    interface Props extends FieldTypes.Props<HTMLDivElement, Classes> {
	        /**
	         * Content to be appear in the form control when the form control is empty
	         */
	        placeholder?: string;
	        /**
	         * Items contained in Select
	         */
	        options: Option[];
	        /**
	         * Allow selecting multiple options
	         */
	        multiselect?: boolean;
	        /**
	         * Allow search values
	         */
	        searchable?: boolean;
	        /**
	         * Select's drop will not close after select option
	         */
	        keepOpen?: boolean;
	        /**
	         * Select's drop will appear only when start typing
	         */
	        openOnFocus?: boolean;
	        /**
	         * Selected options
	         */
	        values?: Option[];
	        /**
	         * Options selected by default
	         */
	        defaultValues?: Option[];
	        /**
	         * Max size of scroll area at select's drop
	         * @default 16rem
	         */
	        maxScrollHeight?: string;
	        /**
	         * Animation of drop
	         * @default { type: 'collapse' }
	         */
	        animation?: DropTypes.Props['animation'];
	        /**
	         * Event is fired when user change value
	         */
	        onChange?: (values: Option[], changedValue?: Option) => void;
	        /**
	         * Event is fired when user types in input
	         */
	        onSearch?: (value: string) => void;
	        /**
	         * Calls every row render, returned Node will be displayed
	         */
	        onRenderItem?: (option: Option, index: number) => React.ReactNode;
	        /**
	         * Display when empty
	         */
	        emptyText?: React.ReactNode;
	    }
	    type State = {
	        selectedOptions: Option[];
	        open: boolean;
	        searchValue: string;
	        empty: boolean;
	        cursor: number;
	    };
	    type ClassState = {
	        shape: Props['shape'];
	        size: Props['size'];
	        decoration: Props['decoration'];
	        isOpen: boolean;
	    };
	    type StyleStateItem = ClassState & {
	        selected: boolean;
	    };
	    type Classes = {
	        /**
	         * Container for selected items
	         */
	        selected: void;
	        /**
	         * Select's input
	         */
	        input: {
	            searchMode: boolean;
	            multiselect: boolean;
	            disableEvents: boolean;
	        };
	        /**
	         * Container of selected option in multiselect
	         */
	        tag: ClassState;
	        /**
	         * Close button for selected option in multiselect
	         */
	        tagRemove: ClassState;
	        /**
	         * Select's drop container
	         */
	        drop: ClassState;
	        /**
	         * Container of every item in drop
	         */
	        dropItem: StyleStateItem;
	        /**
	         * Container view when list is empty
	         */
	        emptyConteiner: ClassState;
	        /**
	         * Container text when list is empty
	         */
	        emptyText: ClassState;
	    } & Partial<FieldTypes.Classes>;
	}
	export default SelectTypes;

}
declare module '@stage-ui/core/control/Select/styles' {
	import Types from '@stage-ui/core/control/Select/types'; const styles: Stage.CreateClasses<Types.Classes, Types.Props>;
	export default styles;

}
declare module '@stage-ui/core/control/Select' {
	import React from 'react';
	import Types from '@stage-ui/core/control/Select/types'; const _default: React.ForwardRefExoticComponent<Types.Props & React.RefAttributes<Types.Ref>>;
	export default _default;

}
declare module '@stage-ui/core/control/Switch/types' {
	import CheckTypes from '@stage-ui/core/basic/Check/types'; namespace SwitchTypes {
	    interface Props extends CheckTypes.Props<HTMLDivElement, Classes> {
	    }
	    type Classes = {
	        /**
	         * Switch container
	         */
	        check: {
	            checked: Props['checked'];
	        };
	        /**
	         * Icon of Switch
	         */
	        switch: {
	            checked: Props['checked'];
	        };
	    } & Partial<CheckTypes.Classes>;
	}
	export default SwitchTypes;

}
declare module '@stage-ui/core/control/Switch/styles' {
	import Types from '@stage-ui/core/control/Switch/types'; const createClasses: Stage.CreateClasses<Types.Classes, Types.Props>;
	export default createClasses;

}
declare module '@stage-ui/core/control/Switch' {
	import React from 'react';
	import Types from '@stage-ui/core/control/Switch/types'; const _default: React.ForwardRefExoticComponent<Types.Props & React.RefAttributes<HTMLDivElement>>;
	export default _default;

}
declare module '@stage-ui/core/control/TextField/types' {
	import { ChangeEventHandler } from 'react';
	import FieldTypes from '@stage-ui/core/basic/Field/types'; namespace TextFieldTypes {
	    type InputTypes = 'email' | 'hidden' | 'number' | 'password' | 'reset' | 'search' | 'tel' | 'text' | 'url';
	    type Ref = {
	        clear: () => void;
	        container: HTMLDivElement | null;
	        input: HTMLInputElement | HTMLTextAreaElement | null;
	    };
	    interface Props extends FieldTypes.Props<HTMLInputElement, Classes>, InputProps, TextAreaProps {
	        /**
	         * Default input value
	         */
	        defaultValue?: string | number;
	        /**
	         * Enables textarea mode
	         * @default false
	         */
	        multiline?: boolean;
	        /**
	         * Calls on input change
	         */
	        onChange?: ChangeEventHandler<HTMLInputElement>;
	        /**
	         * Enables textarea line numbers
	         * @only if multiline true
	         * @default false
	         */
	        leftChildNumber?: ((index: number) => React.ReactNode) | boolean;
	    }
	    interface InputProps {
	        /**
	         * 	Hint for form autofill feature
	         */
	        autoComplete?: string;
	        /**
	         * Automatically focus the form control when the page is loaded
	         */
	        autoFocus?: boolean;
	        /**
	         * Value of the id attribute of the <datalist> of autocomplete options
	         */
	        list?: string;
	        /**
	         * Name of the input form control. Submitted with the form as part of a name/value pair
	         */
	        name?: string;
	        /**
	         * Content to be appear in the form control when the form control is empty
	         */
	        placeholder?: string;
	        /**
	         * 	Pattern the value must match to be valid
	         */
	        pattern?: string;
	        /**
	         * The value is not editable
	         */
	        readOnly?: boolean;
	        /**
	         * A value is required for the form to be submittable
	         */
	        required?: boolean;
	        /**
	         * Type of input form control
	         */
	        type?: InputTypes;
	        /**
	         * Current value of the form control
	         */
	        value?: string | number;
	        /**
	         * Associates the control with a form element
	         */
	        form?: string;
	        /**
	         * 	URL to use for form submission
	         */
	        formAction?: string;
	        /**
	         * Form data set encoding type to use for form submission
	         */
	        formEncType?: string;
	        /**
	         * 	HTTP method to use for form submission
	         */
	        formMethod?: string;
	        /**
	         *  Bypass form control validation for form submission
	         */
	        formNoValidate?: boolean;
	        /**
	         * Browsing context for form submission
	         */
	        formTarget?: string;
	        /**
	         * Maximum value
	         */
	        max?: number | string;
	        /**
	         * Maximum length (number of characters) of value
	         */
	        maxLength?: number;
	        /**
	         * 	Minimum value
	         */
	        min?: number | string;
	        /**
	         * Minimum length (number of characters) of value
	         */
	        minLength?: number;
	        /**
	         * 	Incremental values that are valid
	         */
	        step?: number | string;
	    }
	    interface TextAreaProps {
	        /**
	         * The visible width of the text control, in average character widths
	         */
	        cols?: number;
	        /**
	         * The number of visible text lines for the control
	         */
	        rows?: number;
	        /**
	         * Indicates how the control wraps text
	         */
	        wrap?: string;
	    }
	    type Classes = {
	        /**
	         * TextField's input
	         */
	        input: {
	            multiline: boolean;
	            size: Stage.Sizes;
	            disabled: boolean;
	        };
	        lineNumbers: void;
	    } & Partial<FieldTypes.Classes>;
	}
	export default TextFieldTypes;

}
declare module '@stage-ui/core/control/TextField/styles' {
	import Types from '@stage-ui/core/control/TextField/types'; const styles: Stage.CreateClasses<Types.Classes, Types.Props>;
	export default styles;

}
declare module '@stage-ui/core/control/TextField' {
	import React from 'react';
	import Types from '@stage-ui/core/control/TextField/types'; const _default: React.ForwardRefExoticComponent<Types.Props & React.RefAttributes<Types.Ref>>;
	export default _default;

}
declare module '@stage-ui/core/control/Stepper/types' {
	 namespace StepperTypes {
	    interface StepperData {
	        label?: React.ReactNode;
	    }
	    interface Props extends Omit<Stage.AllProps<HTMLDivElement, Classes>, 'onChange'> {
	        data: StepperData[];
	        size?: Stage.Sizes;
	        current?: number;
	        onChange?: (step: StepperData, stepIndex: number) => void;
	    }
	    type ClassState = {
	        size: Stage.Sizes;
	        active: boolean;
	        complete: boolean;
	        pointer: boolean;
	    };
	    type Classes = {
	        /**
	         * Root element
	         */
	        container: void;
	        step: ClassState;
	        separator: ClassState;
	    };
	}
	export default StepperTypes;

}
declare module '@stage-ui/core/control/Stepper/styles' {
	import Types from '@stage-ui/core/control/Stepper/types'; const styles: Stage.CreateClasses<Types.Classes, Types.Props>;
	export default styles;

}
declare module '@stage-ui/core/control/Stepper' {
	import React from 'react';
	import Types from '@stage-ui/core/control/Stepper/types'; const _default: React.ForwardRefExoticComponent<Types.Props & React.RefAttributes<HTMLDivElement>>;
	export default _default;

}
declare module '@stage-ui/core/data/Meter/types' {
	import MeterThumbTypes from '@stage-ui/core/data/Meter/MeterThumb/types'; namespace MeterTypes {
	    type MeterDecoration = 'filled' | 'outline';
	    type MeterShape = 'square' | 'round';
	    interface Props extends Stage.AllProps<HTMLDivElement, Classes> {
	        /**
	         * Current value of meter, for controlled component
	         */
	        value?: number;
	        /**
	         * Sizes of meter
	         * @display Sizes
	         * @link /props/#size
	         * @default m
	         */
	        size?: Stage.Sizes;
	        /**
	         * Defines how meter look
	         * @default filled
	         */
	        decoration?: MeterDecoration;
	        /**
	         * Shape of meter
	         * @default rounded
	         */
	        shape?: MeterShape;
	        /**
	         * Color of meter
	         */
	        color?: Stage.ColorProp;
	        /**
	         * Enabled progress animation
	         * @default false
	         */
	        loading?: boolean;
	        /**
	         * Children thumbs
	         */
	        children?: React.ReactElement<MeterThumbTypes.Props>[];
	    }
	    type Classes = {
	        /**
	         * Root view
	         */
	        container: {
	            shape: MeterShape;
	            size: Stage.Sizes;
	            decoration: MeterDecoration;
	        };
	        /**
	         * Thumb view
	         */
	        thumb: {
	            shape: MeterShape;
	            size: Stage.Sizes;
	        };
	    };
	}
	export default MeterTypes;

}
declare module '@stage-ui/core/data/Meter/MeterThumb/types' {
	import MeterTypes from '@stage-ui/core/data/Meter/types'; namespace MeterThumbTypes {
	    interface Props extends Stage.AllProps<HTMLDivElement, Classes> {
	        /**
	         * Value for controlled compoents
	         */
	        value: MeterTypes.Props['value'];
	        /**
	         * Thumb color
	         */
	        color?: MeterTypes.Props['color'];
	        /**
	         * Enabled prgoress animation
	         * @default false
	         */
	        loading?: MeterTypes.Props['loading'];
	        shape?: MeterTypes.Props['shape'];
	        size?: MeterTypes.Props['size'];
	    }
	    type Classes = {
	        /**
	         * Thumb view
	         */
	        container: MeterTypes.Classes['thumb'];
	    };
	}
	export default MeterThumbTypes;

}
declare module '@stage-ui/core/data/Meter/MeterThumb/styles' {
	import Types from '@stage-ui/core/data/Meter/MeterThumb/types'; const createClasses: Stage.CreateClasses<Types.Classes, Types.Props>;
	export default createClasses;

}
declare module '@stage-ui/core/data/Meter/MeterThumb' {
	import Types from '@stage-ui/core/data/Meter/MeterThumb/types'; const MeterThumb: (props: Types.Props) => import("@emotion/react/jsx-runtime").JSX.Element;
	export default MeterThumb;

}
declare module '@stage-ui/core/data/Meter/styles' {
	import Types from '@stage-ui/core/data/Meter/types'; const createClasses: Stage.CreateClasses<Types.Classes, Types.Props>;
	export default createClasses;

}
declare module '@stage-ui/core/data/Meter' {
	import React from 'react';
	import Thumb from '@stage-ui/core/data/Meter/MeterThumb';
	import Types from '@stage-ui/core/data/Meter/types'; const _default: React.ForwardRefExoticComponent<Types.Props & React.RefAttributes<HTMLDivElement>> & {
	    Thumb: typeof Thumb;
	};
	export default _default;

}
declare module '@stage-ui/core/utils/containerDecorations' {
	export type ContainerDecorations = 'surface' | 'minorShadow' | 'mediumShadow' | 'majorShadow' | 'skeleton'; type Props = Stage.AllProps<HTMLDivElement, {}> & {
	    decoration?: ContainerDecorations;
	}; const containerDecorations: (props: Props, theme: Stage.Theme) => {
	    background: string;
	    borderRadius: string;
	    borderWidth: string;
	    borderStyle: string;
	    borderColor: string;
	    boxShadow?: undefined;
	    animation?: undefined;
	} | {
	    background: string;
	    borderRadius: string;
	    boxShadow: string;
	    borderWidth?: undefined;
	    borderStyle?: undefined;
	    borderColor?: undefined;
	    animation?: undefined;
	} | {
	    background: string;
	    borderRadius: string;
	    animation: string;
	    borderWidth?: undefined;
	    borderStyle?: undefined;
	    borderColor?: undefined;
	    boxShadow?: undefined;
	} | null;
	export default containerDecorations;

}
declare module '@stage-ui/@stage-ui/core/data/Table/types' {
	import { ContainerDecorations } from '@stage-ui/@stage-ui/core/utils/containerDecorations';
	import { Classes as ClassesType } from '@stage-ui/system/hooks/useSystem'; namespace TableTypes {
	    type RowType = Object;
	    type RowMountType = 
	    /**
	     * Render all rows at onec
	     */
	    'default'
	    /**
	     * Render row only when it become visible
	     */
	     | 'whenBecomeVisible'
	    /**
	     * Render row when it become visible
	     * and unmount when row away from screen
	     */
	     | 'onlyWhenVisible';
	    type TableCellKey = number | string;
	    type TableSortType = 'ASC' | 'DESC';
	    type TableSortAsync = (sortType: TableSortType) => Promise<void>;
	    type TableSortObject = {
	        key: TableCellKey;
	        sort: TableSortType;
	    };
	    type TablePaginationOptions = {
	        pageSize: number;
	        alwaysVisible?: boolean;
	    };
	    interface TableCellContext<Row extends RowType> {
	        /**
	         * Current cell key
	         * @readonly
	         */
	        key: TableCellKey;
	        /**
	         * Current row index
	         * @readonly
	         */
	        index: number;
	        /**
	         * Current row data
	         * @readonly
	         */
	        row: Row;
	        /**
	         * Link on column configuration
	         * @readonly
	         */
	        column: TableColumn<Row> | null;
	        /**
	         * Raw data of cell
	         * @readonly
	         */
	        value?: React.ReactNode | string | number | null;
	        /**
	         * Is current cell in modify mode
	         * @readonly
	         */
	        isModify: boolean;
	        /**
	         * Is current cell in modify mode
	         * @readonly
	         */
	        isCellModify: boolean;
	        /**
	         * Is current row expanded
	         * @readonly
	         */
	        isExpand: boolean;
	        /**
	         * If row visible on screen
	         * @readonly
	         */
	        isVisible: boolean;
	        /**
	         * Set expanded ReactNode below current row
	         */
	        setExpand: (el: React.ReactNode | null) => boolean;
	        /**
	         * Set modify mode for this cell
	         */
	        setModify: (modify: boolean, key?: TableCellKey) => boolean;
	        /**
	         * Reload all data in table
	         */
	        reloadData: () => void;
	        /**
	         * Set row data and reload all data in table
	         */
	        setRow: (row: Row) => void;
	    }
	    type TableRowContext<Row extends RowType> = {
	        /**
	         * Row data
	         */
	        row: Row;
	        /**
	         * true if element expanded
	         * @default false
	         */
	        isExpand: boolean;
	        /**
	         * true if element visible
	         * @default false
	         */
	        isVisible: boolean;
	        /**
	         * keys of cells that in modify mode
	         */
	        isCellModify: {
	            [key: string]: boolean;
	        };
	        /**
	         * Settings cells for modify
	         * undefined - changes all row
	         */
	        setModifyState: {
	            [key: string]: React.Dispatch<React.SetStateAction<boolean>>;
	        };
	        /**
	         * Setting expand for row
	         */
	        setExpandComponent?: React.Dispatch<React.SetStateAction<React.ReactNode>>;
	        /**
	         * Forcing render row
	         */
	        setNeedDisplay?: (forceUnmount?: boolean) => boolean;
	    };
	    interface Ref<Row extends RowType> extends TableRef<Row>, HTMLTableElement {
	    }
	    interface TableRef<Row extends RowType> {
	        /**
	         * Get table current data
	         */
	        getData: () => Row[];
	        /**
	         * Get context for specific cell
	         */
	        getCellContext: (index: number, key: TableCellKey) => TableCellContext<Row> | null;
	        /**
	         * Get context for specific row
	         */
	        getTableRowContext: (index: number) => TableCellContext<Row> | null;
	        /**
	         * Set expanded ReactNode below row index
	         * @returns true if success
	         */
	        setExpand: (index: number, content: React.ReactNode | null) => boolean;
	        /**
	         * Set modify mode for specific row or cell
	         * @returns true if success
	         */
	        setModify: (modify: boolean, index: number, key?: TableCellKey) => boolean;
	    }
	    interface TableColumn<Row extends RowType> {
	        /**
	         * Unique key of row like id/name or something like that
	         */
	        key: TableCellKey;
	        /**
	         * Title that will be placed at TableHead
	         */
	        title?: React.ReactNode;
	        /**
	         * Specific width of column
	         */
	        width?: number | string;
	        /**
	         * Custom render for a TableCell
	         */
	        render?: (cellContext: TableCellContext<Row>, index: number) => React.ReactNode;
	        /**
	         * Enables sorting for a column
	         * support ASC | DESC
	         */
	        sort?: TableSortType | TableSortAsync;
	        /**
	         * Draggable support
	         */
	        dnd?: (source: number, target: number, data: Row[]) => void;
	    }
	    interface RowEvents<Row extends RowType> {
	        /**
	         * Calls when ever row clicked
	         */
	        onRowClick?: (rowCtxItem: TableRowContext<Row>, event: React.MouseEvent<HTMLTableRowElement, MouseEvent>) => void;
	        /**
	         * Calls when mouse enters row
	         */
	        onRowMouseEnter?: (rowCtxItem: TableRowContext<Row>, event: React.MouseEvent<HTMLTableRowElement, MouseEvent>) => void;
	        /**
	         * Calls when mouse leaves row
	         */
	        onRowMouseLeave?: (rowCtxItem: TableRowContext<Row>, event: React.MouseEvent<HTMLTableRowElement, MouseEvent>) => void;
	        onRowDrag?: (rowCtxItem: TableRowContext<Row>, event: React.MouseEvent<HTMLTableRowElement, MouseEvent>) => void;
	        onRowDragStart?: (rowCtxItem: TableRowContext<Row>, event: React.MouseEvent<HTMLTableRowElement, MouseEvent>) => void;
	        onRowDragEnter?: (rowCtxItem: TableRowContext<Row>, event: React.MouseEvent<HTMLTableRowElement, MouseEvent>) => void;
	        onRowDragLeave?: (rowCtxItem: TableRowContext<Row>, event: React.MouseEvent<HTMLTableRowElement, MouseEvent>) => void;
	    }
	    interface RowDelegates<Row extends RowType> {
	        /**
	         * Delegate tells to TableRow what size it is.
	         * Required when rowMountType not default
	         */
	        rowHeight?: (rowCtxItem: TableRowContext<Row>) => number;
	        /**
	         * Delegate tells TableRow render or not
	         */
	        rowShouldRender?: (rowCtxItem: TableRowContext<Row>) => boolean;
	    }
	    interface Props<Row extends RowType> extends RowEvents<Row>, RowDelegates<Row>, Stage.AllProps<HTMLDivElement, Classes> {
	        ref?: any;
	        /**
	         * Array of any data objects can be provided
	         */
	        data: Array<Row>;
	        /**
	         * Settings of columns
	         */
	        columns: TableColumn<Row>[];
	        /**
	         * Applies decoration on table
	         * @default surface
	         */
	        decoration?: ContainerDecorations;
	        /**
	         * Pagination settings
	         */
	        pagination?: TablePaginationOptions;
	        /**
	         * React element will be placed at footer
	         */
	        footer?: React.ReactNode;
	        /**
	         * How Table will render rows.
	         * any type except 'default' requires rowHeight delegate!
	         *
	         * default - Render all rows at once.
	         * whenBecomeVisible - Render row only when it become visible.
	         * onlyWhenVisible - Render row when it become visible and unmount when row away from screen.
	         *
	         * @default default
	         */
	        rowMountType?: RowMountType;
	        rowDidMount?: (rowCtxItem: TableRowContext<Row>) => void;
	        rowDidUnmount?: (rowCtxItem: TableRowContext<Row>) => void;
	        /**
	         * calls data changed by table
	         */
	        onChange?: (data: Row[]) => void;
	    }
	    interface HeadCellProps<Row extends RowType> {
	        column: TableColumn<Row>;
	        styles: ClassesType<Classes>;
	        toggleSort: (sort: TableSortObject) => Promise<unknown>;
	    }
	    interface CellProps<Row extends RowType> {
	        rowCtxItem: TableRowContext<Row>;
	        column: TableColumn<Row>;
	        rowIndex: number;
	        styles: ClassesType<Classes>;
	        getCellContext: TableRef<Row>['getCellContext'];
	    }
	    interface RowProps<Row> {
	        rowCtxItem: TableRowContext<Row>;
	        columns: TableColumn<Row>[];
	        rowIndex: number;
	        styles: ClassesType<Classes>;
	        getCellContext: TableRef<Row>['getCellContext'];
	        events: RowEvents<Row>;
	        rowDidMount?: (rowCtxItem: TableRowContext<Row>) => void;
	        rowDidUnmount?: (rowCtxItem: TableRowContext<Row>) => void;
	        rowMountType?: Props<Row>['rowMountType'];
	        enableRenderOptimization: boolean;
	        delegates: {
	            rowHeight?: Props<Row>['rowHeight'];
	            rowShouldRender?: Props<Row>['rowShouldRender'];
	        };
	        dndRender: () => void;
	    }
	    interface FootProps<Row> {
	        rowCtx: TableRowContext<Row>[];
	        columns: TableColumn<Row>[];
	        footerContent?: Props<Row>['footer'];
	        pagination?: TablePaginationOptions;
	        onPageChange: (pageNumber: number) => void;
	        styles: ClassesType<Classes>;
	    }
	    type Classes = {
	        /**
	         * Root view
	         */
	        container: void;
	        /**
	         * Header cell element view <th>
	         */
	        headCell: {
	            sort: boolean;
	        };
	        /**
	         * Row view <tr>
	         */
	        row: {
	            dragOver: boolean;
	        };
	        /**
	         * Row cell <td>
	         */
	        rowCell: void;
	        /**
	         * Row cell drag anchor <div>
	         */
	        rowCellAnchor: void;
	        /**
	         * Expanded row <td span>
	         */
	        expandContainer: void;
	        /**
	         * Footer view of table
	         */
	        footer: void;
	    };
	}
	export default TableTypes;

}
declare module '@stage-ui/core/data/Table/styles' {
	import Types from '@stage-ui/@stage-ui/core/data/Table/types'; const styles: Stage.CreateClasses<Types.Classes, Types.Props>;
	export default styles;

}
declare module '@stage-ui/core/data/Table/TableFoot' {
	import React from 'react';
	import Types from '@stage-ui/@stage-ui/core/data/Table/types'; const _default: React.ForwardRefExoticComponent<Types.FootProps<any> & React.RefAttributes<HTMLTableCellElement>>;
	export default _default;

}
declare module '@stage-ui/core/data/Table/TableHeadCell' {
	import React from 'react';
	import Types from '@stage-ui/@stage-ui/core/data/Table/types'; const _default: React.ForwardRefExoticComponent<Types.HeadCellProps<any> & React.RefAttributes<HTMLTableDataCellElement>>;
	export default _default;

}
declare module '@stage-ui/core/data/Table/TableCell' {
	import React from 'react';
	import Types from '@stage-ui/@stage-ui/core/data/Table/types'; const _default: React.ForwardRefExoticComponent<Types.CellProps<any> & React.RefAttributes<HTMLTableDataCellElement>>;
	export default _default;

}
declare module '@stage-ui/core/data/Table/TableRow' {
	import React from 'react';
	import Types from '@stage-ui/@stage-ui/core/data/Table/types';
	export const getTR: (target: HTMLElement | null) => HTMLTableRowElement | null; const _default: React.ForwardRefExoticComponent<Types.RowProps<any> & React.RefAttributes<HTMLTableRowElement>>;
	export default _default;

}
declare module '@stage-ui/core/data/Table' {
	import React from 'react';
	import Types from '@stage-ui/@stage-ui/core/data/Table/types';
	export const dndContext: {
	    willRender: boolean;
	    source: number;
	    target: number;
	}; const _default: <Row extends Object>(props: Types.Props<Row>, ref: Types.TableRef<Row>) => React.ReactElement;
	export default _default;

}
declare module '@stage-ui/core/layout/Badge/types' {
	 namespace BadgeTypes {
	    interface Props extends Stage.AllProps<HTMLDivElement, Classes> {
	        /**
	         * Show in badge
	         */
	        content: React.ReactNode;
	        /**
	         * Badge size
	         * @default m
	         * @display Sizes
	         * @link /props/#size
	         */
	        size?: Stage.Sizes;
	        /**
	         * Badge shape
	         */
	        shape?: 'square' | 'rounded' | 'round';
	        /**
	         * Where barge will be placed
	         */
	        align?: 'top' | 'bottom' | 'left' | 'right' | 'top-right' | 'bottom-right' | 'top-left' | 'bottom-left';
	        /**
	         * The element whose badge will be shown
	         */
	        children?: React.ReactNode;
	    }
	    type Classes = {
	        /**
	         * Root element
	         */
	        container: void;
	        /**
	         * Badge container
	         */
	        holder: {
	            align: Props['align'];
	            shape: Props['shape'];
	        };
	    };
	}
	export default BadgeTypes;

}
declare module '@stage-ui/core/layout/Badge/styles' {
	import Types from '@stage-ui/core/layout/Badge/types'; const createClasses: Stage.CreateClasses<Types.Classes, Types.Props>;
	export default createClasses;

}
declare module '@stage-ui/core/layout/Badge' {
	import React from 'react';
	import Types from '@stage-ui/core/layout/Badge/types'; const _default: React.ForwardRefExoticComponent<Types.Props & React.RefAttributes<HTMLDivElement>>;
	export default _default;

}
declare module '@stage-ui/core/layout/Block/types' {
	import { ContainerDecorations } from '@stage-ui/@stage-ui/core/utils/containerDecorations';
	import CSS from 'csstype'; namespace BlockTypes {
	    interface Props extends Stage.AllProps<HTMLDivElement, Classes> {
	        /**
	         * HTML element which is used as a container
	         */
	        as?: 'div' | 'span' | 'header' | 'footer' | 'article' | 'section' | 'aside' | 'main';
	        /**
	         * Defines how block looks
	         */
	        decoration?: ContainerDecorations;
	        /**
	         * Block's content
	         */
	        children?: React.ReactNode;
	        /**
	         * Shorthand for overflow style
	         */
	        overflow?: CSS.Properties['overflow'];
	    }
	    type Classes = {
	        /**
	         * Root element
	         */
	        container: {
	            decoration?: ContainerDecorations;
	        };
	    };
	}
	export default BlockTypes;

}
declare module '@stage-ui/core/layout/Block/styles' {
	import Types from '@stage-ui/core/layout/Block/types'; const createClasses: Stage.CreateClasses<Types.Classes, Types.Props>;
	export default createClasses;

}
declare module '@stage-ui/core/layout/Block' {
	import Types from '@stage-ui/core/layout/Block/types'; const _default: import("react").ForwardRefExoticComponent<Types.Props & import("react").RefAttributes<HTMLDivElement>>;
	export default _default;

}
declare module '@stage-ui/core/layout/Flexbox/types' {
	import { ContainerDecorations } from '@stage-ui/@stage-ui/core/utils/containerDecorations';
	import { BreakpointProp } from '@stage-ui/system/props/breakpoint';
	import { FlexSelf } from '@stage-ui/system/props/types';
	import CSS from 'csstype'; namespace FlexboxTypes {
	    interface Props extends Stage.AllProps<HTMLDivElement, Classes> {
	        /**
	         * Sets alignItems and justifyContent styles center
	         * @BreakpointProp
	         * @display boolean
	         */
	        centered?: BreakpointProp<boolean>;
	        /**
	         * Sets the align-self value on all direct children as a group.
	         * In Flexbox, it controls the alignment of items on the Cross Axis
	         * @BreakpointProp
	         * @display inherit|auto|baseline|center|flex-start|flex-end|stretch
	         * @see https://developer.mozilla.org/docs/Web/CSS/align-items
	         */
	        alignItems?: BreakpointProp<FlexSelf>;
	        /**
	         * Sets the distribution of space between and around content
	         * items along a flexbox's cross-axis or a grid's block axis
	         * @BreakpointProp
	         * @display inherit|auto|baseline|center|flex-start|flex-end|stretch|space-around|space-between|space-evenly
	         * @see https://developer.mozilla.org/docs/Web/CSS/align-content
	         */
	        alignContent?: BreakpointProp<FlexSelf | FlexSpace>;
	        /**
	         * The place-content CSS property is a shorthand for
	         * align-content and justify-content
	         * @BreakpointProp
	         * @display inherit|auto|baseline|center|flex-start|flex-end|stretch|space-around|space-between|space-evenly
	         * @see https://developer.mozilla.org/docs/Web/CSS/place-content
	         */
	        placeContent?: BreakpointProp<FlexSelf | FlexSpace>;
	        /**
	         * Defines how the browser distributes space between and around
	         * content items along the main-axis of a flex container, and
	         * the inline axis of a grid container.
	         * @BreakpointProp
	         * @display inherit|auto|baseline|center|flex-start|flex-end|stretch|space-around|space-between|space-evenly
	         * @see https://developer.mozilla.org/docs/Web/CSS/justify-content
	         */
	        justifyContent?: BreakpointProp<FlexSelf | FlexSpace>;
	        /**
	         * Defines the default justify-self for all items of the box, giving them all
	         * a default way of justifying each box along the appropriate axis
	         * @BreakpointProp
	         * @display inherit|auto|baseline|center|flex-start|flex-end|stretch|space-around|space-between|space-evenly
	         * @see https://developer.mozilla.org/docs/Web/CSS/justify-items
	         */
	        justifyItems?: BreakpointProp<FlexSelf | FlexSpace>;
	        /**
	         * Sets how flex items are placed in the flex container defining the
	         * main axis and the direction (normal or reversed)
	         * @BreakpointProp
	         * @display inherit | initial | revert | unset | column | column-reverse | row | row-reverse
	         * @see https://developer.mozilla.org/docs/Web/CSS/flex-direction
	         */
	        direction?: BreakpointProp<FlexDirection>;
	        /**
	         * Sets flex-direction style to column
	         * @display boolean
	         * @BreakpointProp
	         */
	        column?: BreakpointProp<boolean>;
	        /**
	         * Sets display style to inline-flex
	         * @display boolean
	         * @BreakpointProp
	         */
	        inline?: BreakpointProp<boolean>;
	        /**
	         * Sets whether flex items are forced onto one line or can wrap onto multiple lines
	         * @display inherit | initial | revert | unset | nowrap | wrap | wrap-reverse
	         * @BreakpointProp
	         * @see https://developer.mozilla.org/docs/Web/CSS/flex-wrap
	         */
	        wrap?: BreakpointProp<FlexWrap>;
	        /**
	         * Shorthand property for flex-direction and flex-wrap styles
	         * @display column | column-reverse | nowrap | row | row-reverse | wrap | wrap-reverse
	         * @BreakpointProp
	         * @see https://developer.mozilla.org/docs/Web/CSS/flex-flow
	         */
	        flow?: BreakpointProp<CSS.Properties['flexFlow']>;
	        /**
	         * HTML element which is used as a container
	         */
	        as?: 'div' | 'span' | 'header' | 'footer' | 'article' | 'section' | 'aside' | 'main';
	        /**
	         * Defines how flexbox look
	         */
	        decoration?: ContainerDecorations;
	        /**
	         * Flexbox content
	         */
	        children?: React.ReactNode;
	    }
	    type Classes = {
	        /**
	         * Root element
	         */
	        container: {
	            decoration?: ContainerDecorations;
	        };
	    };
	    type FlexSpace = 'space-around' | 'space-between' | 'space-evenly';
	    type FlexDirection = 'inherit' | 'initial' | 'revert' | 'unset' | 'column' | 'column-reverse' | 'row' | 'row-reverse';
	    type FlexWrap = 'inherit' | 'initial' | 'revert' | 'unset' | 'nowrap' | 'wrap' | 'wrap-reverse';
	}
	export default FlexboxTypes;

}
declare module '@stage-ui/core/layout/Flexbox/styles' {
	import Types from '@stage-ui/core/layout/Flexbox/types'; const createClasses: Stage.CreateClasses<Types.Classes, Types.Props>;
	export default createClasses;

}
declare module '@stage-ui/core/layout/Flexbox' {
	import Types from '@stage-ui/core/layout/Flexbox/types'; const _default: import("react").ForwardRefExoticComponent<Types.Props & import("react").RefAttributes<HTMLDivElement>>;
	export default _default;

}
declare module '@stage-ui/core/layout/Grid/types' {
	import { ContainerDecorations } from '@stage-ui/@stage-ui/core/utils/containerDecorations';
	import { BreakpointProp } from '@stage-ui/system/props/breakpoint';
	import CSS from 'csstype'; namespace GridTypes {
	    interface Props extends Stage.AllProps<HTMLDivElement, Classes> {
	        /**
	         * @display string
	         * @BreakpointProp
	         * @see https://developer.mozilla.org/docs/Web/CSS/grid-template-columns
	         */
	        templateColumns?: BreakpointProp<CSS.Properties['gridTemplateColumns']>;
	        /**
	         * @display string
	         * @BreakpointProp
	         * @see https://developer.mozilla.org/docs/Web/CSS/grid-template-rows
	         */
	        templateRows?: BreakpointProp<CSS.Properties['gridTemplateRows']>;
	        /**
	         * @display string
	         * @BreakpointProp
	         * @see https://developer.mozilla.org/docs/Web/CSS/grid-template-areas
	         */
	        templateAreas?: BreakpointProp<CSS.Properties['gridTemplateAreas']>;
	        /**
	         * @display string
	         * @BreakpointProp
	         * @see https://developer.mozilla.org/docs/Web/CSS/grid-column-gap
	         */
	        columnGap?: BreakpointProp<CSS.Properties['gridColumnGap']>;
	        /**
	         * @display string
	         * @BreakpointProp
	         * @see https://developer.mozilla.org/docs/Web/CSS/grid-row-gap
	         */
	        rowGap?: BreakpointProp<CSS.Properties['gridRowGap']>;
	        /**
	         * @display string
	         * @BreakpointProp
	         * @see https://developer.mozilla.org/docs/Web/CSS/grid-gap
	         */
	        gap?: BreakpointProp<CSS.Properties['gridGap']>;
	        /**
	         * @display string
	         * @BreakpointProp
	         * @see https://developer.mozilla.org/docs/Web/CSS/grid-auto-columns
	         */
	        autoColumns?: BreakpointProp<CSS.Properties['gridAutoColumns']>;
	        /**
	         * @display string
	         * @BreakpointProp
	         * @see https://developer.mozilla.org/docs/Web/CSS/grid-auto-rows
	         */
	        autoRows?: BreakpointProp<CSS.Properties['gridAutoRows']>;
	        /**
	         * @display string
	         * @BreakpointProp
	         * @see https://developer.mozilla.org/docs/Web/CSS/grid-auto-flow
	         */
	        autoFlow?: BreakpointProp<CSS.Properties['gridAutoFlow']>;
	        /**
	         * @display string
	         * @BreakpointProp
	         * @see https://developer.mozilla.org/docs/Web/CSS/align-items
	         */
	        alignItems?: BreakpointProp<CSS.Properties['alignItems']>;
	        /**
	         * @display inherit|auto|baseline|center|start|end|stretch|space-around|space-between|space-evenly
	         * @BreakpointProp
	         * @see https://developer.mozilla.org/docs/Web/CSS/align-content
	         */
	        alignContent?: BreakpointProp<GridSpace | GridSelf>;
	        /**
	         * @display inherit|auto|baseline|center|start|end|stretch|space-around|space-between|space-evenly
	         * @BreakpointProp
	         * @see https://developer.mozilla.org/docs/Web/CSS/justify-content
	         */
	        justifyContent?: BreakpointProp<GridSpace | GridSelf>;
	        /**
	         * @display inherit|auto|baseline|center|start|end|stretch|space-around|space-between|space-evenly
	         * @BreakpointProp
	         * @see https://developer.mozilla.org/docs/Web/CSS/justify-items
	         */
	        justifyItems?: BreakpointProp<GridSpace | GridSelf>;
	        inline?: BreakpointProp<boolean>;
	        /**
	         * Defines how grid look
	         */
	        decoration?: ContainerDecorations;
	        /**
	         * Grid content
	         */
	        children?: React.ReactNode;
	    }
	    type Classes = {
	        /**
	         * Root element
	         */
	        container: {
	            decoration?: ContainerDecorations;
	        };
	    };
	    /**
	     * Used for grid attributes
	     * CSS props have string witch kills helps at ide
	     */
	    type GridSpace = 'space-around' | 'space-between' | 'space-evenly';
	    type GridSelf = 'inherit' | 'auto' | 'baseline' | 'center' | 'start' | 'end' | 'stretch';
	}
	export default GridTypes;

}
declare module '@stage-ui/core/layout/Grid/styles' {
	import Types from '@stage-ui/core/layout/Grid/types'; const createClasses: Stage.CreateClasses<Types.Classes, Types.Props>;
	export default createClasses;

}
declare module '@stage-ui/core/layout/Grid' {
	import Types from '@stage-ui/core/layout/Grid/types'; const _default: import("react").ForwardRefExoticComponent<Types.Props & import("react").RefAttributes<HTMLDivElement>>;
	export default _default;

}
declare module '@stage-ui/@stage-ui/core/layout/Modal/types' {
	import { Classes as ClassesType } from '@stage-ui/system/hooks/useSystem';
	import { AllEventProps, AttributeProps, BorderProps, ColorProps, CoreProps, LayoutProps, PaddingProps } from '@stage-ui/system/props/types';
	import React from 'react'; namespace ModalTypes {
	    type ModalDecoration = 'modal' | 'panel' | 'fullscreen';
	    type ExtentedProps = AttributeProps & AllEventProps<HTMLDivElement> & CoreProps<Classes, HTMLDivElement> & ColorProps & BorderProps & PaddingProps & LayoutProps;
	    interface Ref {
	        /**
	         * Opens modal view with optionaly custom content
	         */
	        open: (render?: React.ReactElement | null) => void;
	        /**
	         * Closes modal, didClose arg called at closing complete
	         */
	        close: (didClose?: () => void) => void;
	        /**
	         * Fn for changing title
	         */
	        setTitle: (title: string) => void;
	        /**
	         * Fn for changing subtitle
	         */
	        setSubtitle: (subtitle: string) => void;
	        /**
	         * Fn for changing content if it custom
	         */
	        setRender: (render: React.ReactElement | null) => void;
	        /**
	         * Current custom content of modal view
	         */
	        render: React.ReactElement | null;
	        /**
	         * Current title of modal view
	         */
	        title?: string;
	        /**
	         * Current subtitle of modal view
	         */
	        subtitle?: string;
	        /**
	         * Ref for overlay view <div>
	         */
	        overlay: HTMLDivElement;
	        /**
	         * Ref for view view <div>
	         */
	        window: HTMLDivElement;
	    }
	    interface Props extends ExtentedProps {
	        /**
	         * Title will be displaed at top
	         */
	        title?: string;
	        /**
	         * Subtitle will be displaed after title
	         */
	        subtitle?: string;
	        /**
	         * Content for modal view
	         */
	        children?: React.ReactNode;
	        /**
	         * Open state, for controlled component
	         */
	        opened?: boolean;
	        /**
	         * How view will looks like
	         * @default modal
	         */
	        decoration?: ModalDecoration;
	        /**
	         * Sizes of view and its content
	         * @default m
	         * @display Sizes
	         * @link /props/#size
	         */
	        size?: Stage.Sizes;
	        /**
	         * Disable header and hide it
	         */
	        hideHeader?: boolean;
	        /**
	         * If true then tap on overlay will close view
	         * @default false
	         */
	        overlayClose?: boolean;
	        /**
	         * Fn calls before view close
	         */
	        onClose?: () => void;
	        /**
	         * Fn calls after view close
	         */
	        didClose?: () => void;
	        /**
	         * Fn calls before view open
	         */
	        onOpen?: () => void;
	        /**
	         * Fn calls after view open
	         */
	        didOpen?: () => void;
	    }
	    interface ModalOverlayProps {
	        getStyles: () => {
	            classes: ClassesType<Classes>;
	            state: ClassState;
	        };
	        children?: React.ReactNode;
	    }
	    interface ModalWindowProps<Element extends HTMLElement> {
	        title?: string;
	        subtitle?: string;
	        hideHeader?: boolean;
	        children?: React.ReactNode;
	        containerAttr?: React.HTMLAttributes<Element>;
	        containerEvents?: any;
	        onClosePressed: () => void;
	        getStyles: () => {
	            classes: ClassesType<Classes>;
	            state: ClassState;
	        };
	    }
	    interface ModalHeaderProps {
	        title?: string;
	        subtitle?: string;
	        hideHeader?: boolean;
	        onClosePressed: () => void;
	        getStyles: () => {
	            classes: ClassesType<Classes>;
	            state: ClassState;
	        };
	    }
	    type ClassState = {
	        visible?: boolean;
	        decoration?: Props['decoration'];
	    };
	    type Classes = {
	        /**
	         * Backside view
	         */
	        overlay: ClassState;
	        /**
	         * Wrapper of modal
	         */
	        wrapper: ClassState;
	        /**
	         * Window it self
	         */
	        window: ClassState;
	        /**
	         * Header of window
	         */
	        header: ClassState;
	        /**
	         * Close button
	         */
	        cross: ClassState;
	    };
	    type DialogRenderFn = (close: () => void) => React.ReactElement;
	    interface DialogOptions extends Props {
	        /**
	         * if custom content filled then message and buttonText will be ignored
	         */
	        render: DialogRenderFn;
	    }
	}
	export default ModalTypes;

}
declare module '@stage-ui/core/layout/Modal/ModalOverlay' {
	import React from 'react';
	import ModalTypes from '@stage-ui/@stage-ui/core/layout/Modal/types'; const ModalOverlay: React.ForwardRefExoticComponent<ModalTypes.ModalOverlayProps & React.RefAttributes<HTMLDivElement>>;
	export default ModalOverlay;

}
declare module '@stage-ui/core/layout/Modal/ModalPortal' {
	import React from 'react'; const _default: (props: {
	    children: React.ReactNode;
	}) => React.ReactPortal;
	export default _default;

}
declare module '@stage-ui/core/layout/Modal/ModalHeader' {
	import ModalTypes from '@stage-ui/@stage-ui/core/layout/Modal/types'; const ModalHeader: (props: ModalTypes.ModalHeaderProps) => import("@emotion/react/jsx-runtime").JSX.Element | null;
	export default ModalHeader;

}
declare module '@stage-ui/core/layout/Modal/ModalWindow' {
	import React from 'react';
	import ModalTypes from '@stage-ui/@stage-ui/core/layout/Modal/types'; const ModalWindow: React.ForwardRefExoticComponent<ModalTypes.ModalWindowProps<HTMLDivElement> & React.RefAttributes<HTMLDivElement>>;
	export default ModalWindow;

}
declare module '@stage-ui/core/layout/Modal/styles' {
	import Types from '@stage-ui/@stage-ui/core/layout/Modal/types'; const createClasses: Stage.CreateClasses<Types.Classes, Types.Props>;
	export default createClasses;

}
declare module '@stage-ui/core/layout/Modal' {
	import React from 'react';
	import Types from '@stage-ui/@stage-ui/core/layout/Modal/types'; const _default: React.ForwardRefExoticComponent<Types.Props & React.RefAttributes<Types.Ref>>;
	export default _default;

}
declare module '@stage-ui/core/layout/Viewport/types' {
	import { Options } from '@emotion/cache';
	import { SerializedStyles } from '@emotion/react'; namespace ViewportTypes {
	    interface Props extends Stage.AllProps<HTMLDivElement, Classes> {
	        /**
	         * Defines whether the viewport renders content inside the container
	         * @default false
	         */
	        wrapper?: boolean;
	        /**
	         * Emotion cache options
	         */
	        cache?: Options;
	        /**
	         * Defines which theme to put in context.
	         * @default light
	         */
	        theme?: 'dark' | 'light' | Stage.Theme;
	        /**
	         * Set global CSS
	         */
	        global?: SerializedStyles;
	        /**
	         * Application content
	         */
	        children?: React.ReactNode;
	    }
	    type Classes = {
	        /**
	         * Root element
	         */
	        container: void;
	    };
	    type Themes = {
	        light: Stage.Theme;
	        dark: Stage.Theme;
	    };
	    type MountArea = {
	        className?: string;
	    };
	    type MountAreaPlacement = 'topLeft' | 'topCenter' | 'topRight' | 'centerLeft' | 'center' | 'centerRight' | 'bottomLeft' | 'bottomCenter' | 'bottomRight';
	    type MountAreaElement = {
	        key: string;
	        children: React.ReactElement;
	        placement: MountAreaPlacement;
	    };
	    type Context = {
	        theme: Stage.Theme;
	    };
	    type Shared = {
	        addElement: (children: React.ReactElement, key?: string, placement?: MountAreaPlacement) => string;
	        removeElement: (key: string) => void;
	    };
	}
	export default ViewportTypes;

}
declare module '@stage-ui/core/layout/Notification/types' {
	import BlockTypes from '@stage-ui/core/layout/Block/types';
	import ViewportTypes from '@stage-ui/core/layout/Viewport/types'; namespace NotificationTypes {
	    interface Props extends Stage.AllProps<HTMLDivElement, Classes>, Omit<BlockTypes.Props, 'overrides'> {
	        children?: React.ReactNode;
	        /**
	         * Position of notification block
	         */
	        placement?: ViewportTypes.MountAreaPlacement;
	    }
	    interface NotifyOptions extends Props {
	        /**
	         * Position of notification block
	         */
	        placement?: ViewportTypes.MountAreaPlacement;
	        /**
	         * Title of notification
	         */
	        title: string;
	        /**
	         * Message of notification
	         */
	        message: string;
	        /**
	         * Time in milliseconds after which the notification will be removed
	         */
	        timeout?: number;
	        /**
	         * if custom content filled then message and message will be ignored
	         */
	        render?: (close: () => void) => React.ReactElement;
	    }
	    type Classes = {
	        /**
	         * Root element
	         */
	        container: void;
	    };
	}
	export default NotificationTypes;

}
declare module '@stage-ui/core/layout/Notification/styles' {
	import Types from '@stage-ui/core/layout/Notification/types'; const createClasses: Stage.CreateClasses<Types.Classes, Types.Props>;
	export default createClasses;

}
declare module '@stage-ui/core/layout/Notification' {
	import React from 'react';
	import Types from '@stage-ui/core/layout/Notification/types'; const _default: React.ForwardRefExoticComponent<Types.Props & React.RefAttributes<HTMLDivElement>>;
	export default _default;

}
declare module '@stage-ui/core/layout/Tree/types' {
	 namespace TreeTypes {
	    type RenderChildOptions = {
	        isOpen: boolean;
	        isParentOpen: boolean;
	        hasChilds: boolean;
	        lvl: number;
	    };
	    type RenderChild = (options: RenderChildOptions) => React.ReactNode;
	    interface Props extends Stage.AllProps<HTMLDivElement, Classes> {
	        label?: React.ReactNode | string | RenderChild;
	        leftChild?: React.ReactNode | string | RenderChild;
	        rightChild?: React.ReactNode | string | RenderChild;
	        children?: React.ReactNode;
	        decoration?: 'none' | 'finder';
	        size?: Stage.Sizes;
	        open?: boolean;
	        defaultOpen?: boolean;
	        indent?: boolean;
	    }
	    interface PrivateProps extends Props {
	        __TYPE: 'Tree';
	        lvl: number;
	        isParentOpen: boolean;
	    }
	    interface TreeLabelProps {
	        children?: Props['label'];
	        className?: Props['className'];
	        size: Props['size'];
	        options: RenderChildOptions;
	    }
	    interface TreeLeftChildProps {
	        children?: Props['leftChild'];
	        className?: Props['className'];
	        size: Props['size'];
	        options: RenderChildOptions;
	    }
	    interface TreeRightChildProps {
	        children?: Props['leftChild'];
	        className?: Props['className'];
	        size: Props['size'];
	        options: RenderChildOptions;
	    }
	    type TreeElement = React.ReactElement<PrivateProps>;
	    type ClassState = {
	        hasChilds: boolean;
	        decoration: Props['decoration'];
	        size: Props['size'];
	    };
	    type Classes = {
	        container: ClassState;
	        row: ClassState;
	        label: ClassState;
	        arrow: ClassState;
	        child: {
	            isOpen: boolean;
	        };
	    };
	}
	export default TreeTypes;

}
declare module '@stage-ui/core/layout/Tree/styles' {
	import Types from '@stage-ui/core/layout/Tree/types'; const createClasses: Stage.CreateClasses<Types.Classes, Types.PrivateProps>;
	export default createClasses;

}
declare module '@stage-ui/core/layout/Tree/TreeLabel' {
	import Types from '@stage-ui/core/layout/Tree/types'; const TreeLabel: (props: Types.TreeLabelProps) => import("@emotion/react/jsx-runtime").JSX.Element;
	export default TreeLabel;

}
declare module '@stage-ui/core/layout/Tree/TreeLeftChild' {
	import Types from '@stage-ui/core/layout/Tree/types'; const TreeLeftChild: (props: Types.TreeLeftChildProps) => import("@emotion/react/jsx-runtime").JSX.Element;
	export default TreeLeftChild;

}
declare module '@stage-ui/core/layout/Tree/TreeRightChild' {
	import Types from '@stage-ui/core/layout/Tree/types'; const TreeRightChild: (props: Types.TreeRightChildProps) => import("@emotion/react/jsx-runtime").JSX.Element;
	export default TreeRightChild;

}
declare module '@stage-ui/core/layout/Tree' {
	import React from 'react';
	import Types from '@stage-ui/core/layout/Tree/types'; const _default: React.ForwardRefExoticComponent<Types.Props & React.RefAttributes<HTMLDivElement>>;
	export default _default;

}
declare module '@stage-ui/core/utils/isWebKit' {
	 const _default: boolean;
	export default _default;

}
declare module '@stage-ui/core/layout/ScrollView/types' {
	import React from 'react'; namespace ScrollViewTypes {
	    interface ScrollViewEvent {
	        scrollTop: number;
	        scrollLeft: number;
	        scrollWidth: number;
	        scrollHeight: number;
	    }
	    interface ScrollToOptions {
	        /**
	         * if true watchElement will not
	         * call at this scrollUpdate
	         */
	        preventWatchElement?: boolean;
	        /**
	         * Smooth scroll
	         * @only webkit
	         */
	        smooth?: boolean;
	    }
	    interface ScrollToElementOptions extends ScrollToOptions {
	        /**
	         * Offset px at top edge of element
	         */
	        offsetTop?: number;
	    }
	    interface ScrollParams extends ScrollToOptions {
	        deltaX: number;
	        deltaY: number;
	        preventDefault: () => void;
	        stopPropagation: () => void;
	        cursorHandle?: boolean;
	    }
	    interface Props extends Omit<Stage.AllProps<HTMLDivElement, Classes>, 'onScroll'> {
	        /**
	         * Any contant of scrollview
	         */
	        children?: React.ReactNode;
	        /**
	         * Display mode
	         * @default scroll
	         */
	        mode?: 'always' | 'scroll' | 'hidden';
	        /**
	         * Custom ScrollBar color
	         */
	        color?: Stage.ColorProp;
	        /**
	         * Bars size
	         * @default m
	         * @display Sizes
	         * @link /props/#size
	         */
	        size?: Stage.Sizes;
	        /**
	         * Bars shape
	         * @default round
	         */
	        shape?: 'square' | 'round';
	        /**
	         * Position of X bar
	         * @default bottom
	         */
	        xBarPosition?: 'top' | 'bottom' | 'none';
	        /**
	         * Position of Y bar
	         * @default right
	         */
	        yBarPosition?: 'left' | 'right' | 'none';
	        /**
	         * Scroll bar padding offset
	         */
	        barOffset?: number;
	        /**
	         * If true
	         * onstagescroll will not dispatch
	         */
	        preventStageEvents?: boolean;
	        /**
	         * Calls when ever user scrolls
	         */
	        onScroll?: (event: ScrollViewEvent) => void;
	        /**
	         * Calls when elements with data-id attribut got visible
	         * and stays at the top of visible area of ScrollView
	         */
	        watchElement?: <T extends HTMLDivElement>(dataId: string, element: T) => void;
	    }
	    interface Ref {
	        /**
	         * Forcing update scrollview positions
	         */
	        updateScroll: () => void;
	        /**
	         * Scroll to top
	         * @deprecated use scrollTop()
	         */
	        onScrollTop: () => void;
	        /**
	         * Scroll to top
	         */
	        scrollTo: (x: number, y: number, options?: ScrollToOptions) => void;
	        /**
	         * Scroll to top
	         */
	        scrollTop: (options?: ScrollToOptions) => void;
	        /**
	         * Scroll to bottom
	         */
	        scrollBottom: (options?: ScrollToOptions) => void;
	        /**
	         * Scroll to specific item by its data-id attribute
	         * data-id attribute should be unique at document
	         * if item not found function returns false
	         */
	        scrollToElement: (dataId: string, options?: ScrollToElementOptions) => boolean;
	        /**
	         * Ref to container element
	         */
	        container: HTMLDivElement | null;
	    }
	    type Classes = {
	        /**
	         * Root wrapper
	         */
	        wrapper: void;
	        /**
	         * Root view
	         */
	        container: void;
	        /**
	         * Content view
	         */
	        content: void;
	        /**
	         * Webkit container for webkit browsers
	         */
	        webkit: void;
	        /**
	         * Vertical scroll bar view
	         */
	        yBar: {
	            active: boolean;
	            shape: Props['shape'];
	            size: Props['size'];
	            position: Props['yBarPosition'];
	        };
	        /**
	         * Vertical scroll thumb
	         */
	        yThumb: {
	            active: boolean;
	            shape: Props['shape'];
	            size: Props['size'];
	        };
	        /**
	         * Horizontal scroll bar view
	         */
	        xBar: {
	            active: boolean;
	            shape: Props['shape'];
	            size: Props['size'];
	            position: Props['xBarPosition'];
	        };
	        /**
	         * Horizontal scroll thumb
	         */
	        xThumb: {
	            active: boolean;
	            shape: Props['shape'];
	            size: Props['size'];
	        };
	    };
	}
	export default ScrollViewTypes;

}
declare module '@stage-ui/core/layout/ScrollView/styles' {
	import Types from '@stage-ui/core/layout/ScrollView/types'; const createClasses: Stage.CreateClasses<Types.Classes, Types.Props>;
	export default createClasses;

}
declare module '@stage-ui/core/layout/ScrollView' {
	import React from 'react';
	import Types from '@stage-ui/core/layout/ScrollView/types'; const _default: React.ForwardRefExoticComponent<Types.Props & React.RefAttributes<Types.Ref>>;
	export default _default;

}
declare module '@stage-ui/core/layout/Split/types' {
	import React from 'react'; namespace SplitTypes {
	    interface Props extends Omit<Stage.AllProps<HTMLDivElement, Classes>, 'onMove' | 'onChange'> {
	        direction?: 'row' | 'column';
	        children: React.ReactElement[];
	        /**
	         * Split area size, value in pixels
	         */
	        areaSize?: number;
	        /**
	         * You can give it array of numbers (in percent)
	         */
	        positions?: number[];
	        /**
	         * Calls when split area moves
	         */
	        onMove?: (positions: number[]) => void;
	        /**
	         * Calls when mouseUp if position did change
	         */
	        onChange?: (positions: number[]) => void;
	    }
	    interface SeparatorProps {
	        areaSize: number;
	        defaultVertical: boolean;
	        container: () => Ref;
	        prev: () => Ref;
	        next: () => Ref;
	    }
	    type Classes = {
	        container: {
	            vertical: boolean;
	        };
	        test: void;
	    };
	    type Ref = React.RefObject<HTMLDivElement & {
	        vertical?: boolean;
	        onMove?: () => void;
	        onChange?: () => void;
	    }>;
	}
	export default SplitTypes;

}
declare module '@stage-ui/core/layout/Split/Separator' {
	import Types from '@stage-ui/core/layout/Split/types'; const Separator: (props: Types.SeparatorProps) => import("@emotion/react/jsx-runtime").JSX.Element;
	export default Separator;

}
declare module '@stage-ui/core/layout/Split/styles' {
	import Types from '@stage-ui/core/layout/Split/types'; const createClasses: Stage.CreateClasses<Types.Classes, Types.Props>;
	export default createClasses;

}
declare module '@stage-ui/core/layout/Split' {
	import React from 'react';
	import Types from '@stage-ui/core/layout/Split/types'; const _default: React.ForwardRefExoticComponent<Types.Props & React.RefAttributes<HTMLDivElement>>;
	export default _default;

}
declare module '@stage-ui/core/themes' {
	/**
	 * Content
	 */
	import DividerTypes from '@stage-ui/core/content/Divider/types';
	import SpinnerTypes from '@stage-ui/core/content/Spinner/types';
	import HeaderTypes from '@stage-ui/core/content/Header/types';
	import ParagraphTypes from '@stage-ui/core/content/Paragraph/types';
	import TextTypes from '@stage-ui/core/content/Text/types';
	import LinkTypes from '@stage-ui/core/content/Link/types';
	/**
	 * Control
	 */
	import ButtonTypes from '@stage-ui/core/control/Button/types';
	import Calendar from '@stage-ui/core/control/Calendar/types';
	import CheckboxTypes from '@stage-ui/core/control/Checkbox/types';
	import DatePickerTypes from '@stage-ui/core/control/DatePicker/types';
	import MenuTypes from '@stage-ui/core/control/Menu/types';
	import RadioTypes from '@stage-ui/core/control/Radio/types';
	import RangeTypes from '@stage-ui/core/control/Range/types';
	import SelectTypes from '@stage-ui/core/control/Select/types';
	import StepperTypes from '@stage-ui/core/control/Stepper/types';
	import SwitchTypes from '@stage-ui/core/control/Switch/types';
	import TextFieldTypes from '@stage-ui/core/control/TextField/types';
	/**
	 * Data
	 */
	import MeterTypes from '@stage-ui/core/data/Meter/types';
	import TableTypes from '@stage-ui/@stage-ui/core/data/Table/types';
	/**
	 * Layout
	 */
	import BadgeTypes from '@stage-ui/core/layout/Badge/types';
	import BlockTypes from '@stage-ui/core/layout/Block/types';
	import DropTypes from '@stage-ui/core/layout/Drop/types';
	import FlexboxTypes from '@stage-ui/core/layout/Flexbox/types';
	import GridTypes from '@stage-ui/core/layout/Grid/types';
	import ModalTypes from '@stage-ui/@stage-ui/core/layout/Modal/types';
	import NotificationTypes from '@stage-ui/core/layout/Notification/types';
	import PopoverTypes from '@stage-ui/core/layout/Popover/types';
	import TreeTypes from '@stage-ui/core/layout/Tree/types';
	import ScrollView from '@stage-ui/core/layout/ScrollView/types'; global {
	    namespace Stage {
	        interface ThemeOverrides {
	            Divider?: Stage.ComponentThemeOverrides<DividerTypes.Props, DividerTypes.Classes>;
	            Spinner?: Stage.ComponentThemeOverrides<SpinnerTypes.Props, SpinnerTypes.Classes>;
	            Header?: Stage.ComponentThemeOverrides<HeaderTypes.Props, HeaderTypes.Classes>;
	            Paragraph?: Stage.ComponentThemeOverrides<ParagraphTypes.Props, ParagraphTypes.Classes>;
	            Text?: Stage.ComponentThemeOverrides<TextTypes.Props, TextTypes.Classes>;
	            Link?: Stage.ComponentThemeOverrides<LinkTypes.Props, LinkTypes.Classes>;
	            Button?: Stage.ComponentThemeOverrides<ButtonTypes.Props, ButtonTypes.Classes>;
	            Calendar?: Stage.ComponentThemeOverrides<Calendar.Props, Calendar.Classes>;
	            Checkbox?: Stage.ComponentThemeOverrides<CheckboxTypes.Props, CheckboxTypes.Classes>;
	            DatePicker?: Stage.ComponentThemeOverrides<DatePickerTypes.Props, DatePickerTypes.Classes>;
	            Menu?: Stage.ComponentThemeOverrides<MenuTypes.Props, MenuTypes.Classes>;
	            Radio?: Stage.ComponentThemeOverrides<RadioTypes.Props, RadioTypes.Classes>;
	            Range?: Stage.ComponentThemeOverrides<RangeTypes.Props, RangeTypes.Classes>;
	            Select?: Stage.ComponentThemeOverrides<SelectTypes.Props, SelectTypes.Classes>;
	            Stepper?: Stage.ComponentThemeOverrides<StepperTypes.Props, StepperTypes.Classes>;
	            Switch?: Stage.ComponentThemeOverrides<SwitchTypes.Props, SwitchTypes.Classes>;
	            TextField?: Stage.ComponentThemeOverrides<TextFieldTypes.Props, TextFieldTypes.Classes>;
	            Meter?: Stage.ComponentThemeOverrides<MeterTypes.Props, MeterTypes.Classes>;
	            Table?: Stage.ComponentThemeOverrides<TableTypes.Props<any>, TableTypes.Classes>;
	            Badge?: Stage.ComponentThemeOverrides<BadgeTypes.Props, BadgeTypes.Classes>;
	            Block?: Stage.ComponentThemeOverrides<BlockTypes.Props, BlockTypes.Classes>;
	            Drop?: Stage.ComponentThemeOverrides<DropTypes.Props, DropTypes.Classes>;
	            Flexbox?: Stage.ComponentThemeOverrides<FlexboxTypes.Props, FlexboxTypes.Classes>;
	            Grid?: Stage.ComponentThemeOverrides<GridTypes.Props, GridTypes.Classes>;
	            Modal?: Stage.ComponentThemeOverrides<ModalTypes.Props, ModalTypes.Classes>;
	            Notification?: Stage.ComponentThemeOverrides<NotificationTypes.Props, NotificationTypes.Classes>;
	            Popover?: Stage.ComponentThemeOverrides<PopoverTypes.Props, PopoverTypes.Classes>;
	            Tree?: Stage.ComponentThemeOverrides<TreeTypes.Props, TreeTypes.Classes>;
	            ScrollView?: Stage.ComponentThemeOverrides<ScrollView.Props, ScrollView.Classes>;
	        }
	    }
	} module '@emotion/react' {
	    interface Theme extends Stage.Theme {
	    }
	}
	export const light: Stage.Theme;
	export const dark: Stage.Theme;

}
declare module '@stage-ui/core/layout/Viewport/MountArea' {
	import { FC } from 'react';
	import ViewportTypes from '@stage-ui/core/layout/Viewport/types';
	export const ViewportShared: ViewportTypes.Shared; const MountArea: FC<ViewportTypes.MountArea>;
	export default MountArea;

}
declare module '@stage-ui/core/layout/Viewport/resets' {
	 const _default: "\n  html, body, div, span, applet, object, iframe,\n  blockquote, pre,\n  a, abbr, acronym, address, big, cite, code,\n  del, dfn, em, img, ins, kbd, q, s, samp,\n  small, strike, strong, sub, sup, tt, var,\n  b, u, i, center,\n  dl, dt, dd, fieldset, form, label, legend,\n  table, caption, tbody, tfoot, thead, tr, th, td,\n  article, aside, canvas, details, embed, \n  figure, figcaption, footer, header, hgroup, \n  menu, nav, output, ruby, section, summary,\n  time, mark, audio, video {\n      margin: 0;\n      padding: 0;\n      border: 0;\n      font-size: 100%;\n      vertical-align: baseline;\n  }\n";
	export default _default;

}
declare module '@stage-ui/core/layout/Viewport/styles' {
	import Types from '@stage-ui/core/layout/Viewport/types'; const createClasses: Stage.CreateClasses<Types.Classes, Types.Props>;
	export default createClasses;

}
declare module '@stage-ui/core/layout/Viewport' {
	import React from 'react';
	import Types from '@stage-ui/core/layout/Viewport/types'; const _default: React.ForwardRefExoticComponent<Types.Props & React.RefAttributes<HTMLDivElement>>;
	export default _default;

}
declare module '@stage-ui/core/utils/dialog' {
	import ModalTypes from '@stage-ui/@stage-ui/@stage-ui/core/layout/Modal/types'; const _default: (render: ModalTypes.DialogOptions | ModalTypes.DialogRenderFn) => void;
	export default _default;

}
declare module '@stage-ui/core/utils/notify' {
	import NotificationType from '@stage-ui/@stage-ui/core/layout/Notification/types'; const _default: (options: NotificationType.NotifyOptions) => void;
	export default _default;

}
declare module '@stage-ui/core/hooks/useBreakpoint' {
	export const useBreakpoint: <T>(values: T[]) => T;

}
declare module '@stage-ui/core' {
	/**
	 * Content
	 */
	export { default as Divider } from '@stage-ui/core/content/Divider';
	export { default as Spinner } from '@stage-ui/core/content/Spinner';
	export { default as Header } from '@stage-ui/core/content/Header';
	export { default as Paragraph } from '@stage-ui/core/content/Paragraph';
	export { default as Text } from '@stage-ui/core/content/Text';
	export { default as Link } from '@stage-ui/core/content/Link';
	export { default as Toast } from '@stage-ui/core/content/Toast';
	/**
	 * Control
	 */
	export { default as Button } from '@stage-ui/core/control/Button';
	export { default as Calendar } from '@stage-ui/core/control/Calendar';
	export { default as Checkbox } from '@stage-ui/core/control/Checkbox';
	export { default as DatePicker } from '@stage-ui/core/control/DatePicker';
	export { default as Menu } from '@stage-ui/core/control/Menu';
	export { default as Radio } from '@stage-ui/core/control/Radio';
	export { default as Range } from '@stage-ui/core/control/Range';
	export { default as Pageswitch } from '@stage-ui/core/control/Pageswitch';
	export { default as Select } from '@stage-ui/core/control/Select';
	export { default as Switch } from '@stage-ui/core/control/Switch';
	export { default as TextField } from '@stage-ui/core/control/TextField';
	export { default as Stepper } from '@stage-ui/core/control/Stepper';
	/**
	 * Data
	 */
	export { default as Meter } from '@stage-ui/core/data/Meter';
	export { default as Table } from '@stage-ui/core/data/Table';
	/**
	 * Layout
	 */
	export { default as Badge } from '@stage-ui/core/layout/Badge';
	export { default as Block } from '@stage-ui/core/layout/Block';
	export { default as Drop } from '@stage-ui/core/layout/Drop';
	export { default as Flexbox } from '@stage-ui/core/layout/Flexbox';
	export { default as Grid } from '@stage-ui/core/layout/Grid';
	export { default as Modal } from '@stage-ui/core/layout/Modal';
	export { default as Notification } from '@stage-ui/core/layout/Notification';
	export { default as Popover } from '@stage-ui/core/layout/Popover';
	export { default as Tree } from '@stage-ui/core/layout/Tree';
	export { default as ScrollView } from '@stage-ui/core/layout/ScrollView';
	export { default as Split } from '@stage-ui/core/layout/Split';
	export { default as Viewport } from '@stage-ui/core/layout/Viewport';
	/**
	 * Utils
	 */
	export { default as dialog } from '@stage-ui/core/utils/dialog';
	export { default as notify } from '@stage-ui/core/utils/notify';
	/**
	 * Misc
	 */
	export { useTheme } from '@stage-ui/system';
	export { createTheme } from '@stage-ui/system';
	export { useBreakpoint } from '@stage-ui/core/hooks/useBreakpoint';
	/**
	 * @deprecated
	 */
	export { useBreakpoint as useBreakpoints } from '@stage-ui/core/hooks/useBreakpoint';

}
